h2. Deploying Your Application

This article will walk you through configuring and deploying your Spree application to an environment on Ubuntu 12.04. 

This guide assumes an absolutely clean-slate Ubuntu 12.04 Server install, and covers setting up the following things:

* A user for the application
* Operating system dependencies required for Ruby, Rails and Spree
* Ruby 1.9.3
* Rails 3.2.8
* A Spree application

endprologue.

h2. Initial Server Setup

The first thing you will need on your server is a user account on the server which will be responsible for providing a container for your application's install.

h3. A user account

NOTE: For the purposes of this guide, the user's account on the system will be called "spree", but you may choose to call it whatever you wish.

To set up this new user, run these commands on the server:

<shell>
useradd -d /home/spree -m -s /bin/bash spree
passwd spree
</shell>

Set a new password for the user and remember it, as you will require it in just a moment.

h4. Key-based authentication

The next thing to set up is secure key-based authentication on the server. This will involve setting up a private key on your system, copying over the related public key to the server, asserting that you can now login without providing a password, and then disabling password authentication on the server to increase security.

On the remote server, set up an +.ssh+ directory to contain the new public key for a user by running these commands:

<shell>
mkdir /home/spree/.ssh
chown spree:spree /home/spree/.ssh
chmod 700 /home/spree/.ssh
</shell>

This directory is used to authenticate key-based authentication when using SSH.

On your local machine, generate a private key using +ssh-keygen+ like this:

<shell>
ssh-keygen -t rsa
</shell>

Set the filename to be [your home directory]/.ssh/spree_rsa.

You can choose to enter a password if you wish. All that would mean is that you would need to provide that password to use the key.

NOTE: If you already have a private key, you can use that one.

Once you've finished generating this key, you will need to copy the public version of this key over to the new server. To do this, run this command:

<shell>
scp ~/.ssh/spree_rsa.pub spree@[your server's address]:~/.ssh/authorized_keys
</shell>

The password you will need to enter here is the password for the user account on the remote server.

Once you've set this up, you will then be able to use key-based authentication to connect to the server:

<shell>
ssh spree@[your server's address] -i [your home directory]/.ssh/spree_rsa
</shell>

To save having to use the +i+ option here, you can place the following lines inside +.ssh/config+ on your local machine:

<plain>
Host [your server's address]
  IdentityFile ~/.ssh/spree_rsa
</plain>

You should now follow the same steps for the +root+ user on your server as well, so that you can authenticate with the same key to access both the deployment user and root accounts. You may choose to use a completely different key if you wish.

Once you have verified -- by connecting via SSH to the remote server -- that both accounts work without password authentication, you can now disable password-based authentication.

To disable password-based authentication, you will need to uncomment this line within +/etc/ssh/ssh_config+ and change the "yes" value to "no":

<plain>
#PasswordAuthentication yes
</plain>

Then you will need to restart the SSH daemon on the server, by running this command:

<plain>
service ssh restart
</plain>

After this, if you attempt to run +ssh spree@localhost+ from within the server itself, it will return "Permission denied (publickey)", indicating that it has not attempted to authenticate with a password, but instead with a publickey, which the server does not have configured.

Now that the user is set up on your system and access to it and root's account are locked down a bit tighter, it's time to set up Ruby.

h3. Operating System Dependenices and Ruby

To install Ruby, you are going to use the "RVM":http://rvm.io tool. This tool provides a simple way of installing a version of Ruby onto your server.

To install it, run these command:

<shell>
curl -L https://get.rvm.io | bash -s stable
. ~/.bashrc
</shell>

Next, you will need to install the operating system dependencies required for Ruby. When you run +rvm requirements+, these dependencies are listed underneath the heading "Additional Dependencies". For MRI Ruby, these dependencies are as follows:

<shell>
build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g 
zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev 
libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison 
subversion pkg-config
</shell>

To install these dependencies, run these commands **as root**:

<shell>
apt-get update
apt-get install -y build-essential openssl libreadline6 libreadline6-dev curl \
git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 \
libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison \
subversion pkg-config
</shell>

Once these dependencies are installed, switch back into the +spree+ user and install Ruby 1.9.3 by running this command:

<shell>
rvm install 1.9.3
</shell>

This command will take a couple of minutes to finish running.

Once it's finished running, run this command to make that version of Ruby the default for this user:

<shell>
rvm use 1.9.3
</shell>

Ensure that this version of Ruby is really the new default by running this command:

<shell>
ruby -v
</shell>

It should output something similar to this:

<shell>
ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux]
</shell>

You now have a version of Ruby correctly configured on your server.

h3. Deploying to the server

The next step is to put your Spree application onto the server. To do this, you will use the deployment tool called "Capistrano":https://github.com/capistrano/capistrano/wiki.

Install Capistrano on your local system by running this command:

<shell>
gem install capistrano
</shell>

Then, inside the directory for your Spree app, run this command to set up a Capistrano deploy configuration:

<shell>
capify .
</shell>

This command will create two files: a +Capfile+ and a +config/deploy.rb+. The +config/deploy.rb+ file is where you will be configuring how Capistrano chooses to deploy your application. Open this file now and you will see the following lines (comments removed):

<ruby>
set :application, "set your application name here"
set :repository,  "set your repository location here"

set :scm, :subversion
# Or: `accurev`, `bzr`, `cvs`, `darcs`, `git`, `mercurial`, `perforce`, `subversion` or `none`

role :web, "your web-server here"                          # Your HTTP server, Apache/etc
role :app, "your app-server here"                          # This may be the same as your `Web` server
role :db,  "your primary db-server here", :primary => true # This is where Rails migrations will run
role :db,  "your slave db-server here"
</ruby>

The contents of this file tell Capistrano about the deployment of your application.

The +application+ variable tells Capistrano the name of your application, and the +repository+ variable tells it where it can find the source of your application. The +scm+ variable tells Capistrano the type of source control system you're using. If you're using Spree, there's a high chance that's going to be +:git+, so change that over now. Change the +application+ and +repository+ now to accurately reflect your application.

The next batch of things to configure in this file are the different "roles". These tell Capistrano which servers play which roles within your server architecture. Within this guide, you've been working with a single server and will continue to do so. Therefore, these roles should look like this:

<ruby>
server = "[your server's address]"
role :web, server
role :app, server
role :db,  server, :primary => true
</ruby>

After this, you will need to tell Capistrano the account name to use for deploying to your server. In this guide, we've used "spree" so far, but you may have chosen to use something different. To tell Capistrano the user to use, put this line inside your +config/deploy.rb+:

<ruby>
set :user, "spree"
</ruby>

You will also need to tell it the path to deploy at. By default in Capistrano, this path is +/u/apps/[application_name]+. There is no +/u/+ directory on the server, so that won't work for you immediately. You already have a self-contained user account on the server, so deploying the application to that user's home directory would make better sense. Add this line to +config/deploy.rb+ to do that:

<ruby>
set :deploy_to, "/home/spree/#{application_name}"
</ruby>

You will also need to tell Capistrano to never use sudo, since you're going to be operating as a user without sudo permission:

<ruby>
set :use_sudo, false
</ruby>

Along with this, you will also need to tell it to use the +bash+ shell, as you will need access to the commands for gems such as +bundler+, which are provided by RVM.

<ruby>
default_run_options[:shell] = '/bin/bash --login'
</ruby> 

With that configuration, your +config/deploy.rb+ should look like this:

<ruby>
set :application, "[name]"
set :repository,  "[repository]"

set :scm, :git

server = "[your server's address]"

role :web, server
role :app, server
role :db,  server, :primary => true # This is where Rails migrations will run

set :user, "spree"

set :deploy_to, "/home/spree/#{application}"
set :use_sudo, false

default_run_options[:shell] = '/bin/bash --login'
</ruby>

To set up the server for Capistrano, run +cap deploy:setup+. This will create the required Capistrano directories for your application inside +/home/spree/[name]+.

You will need to add another two lines to the top of this file as well so that the application's gem dependencies are installed onto the server with Bundler, and the assets are precompiled. These two lines are this:

<ruby>
require "bundler/capistrano"
load "deploy/assets"
</ruby>

To attempt to deploy the actual application to the server, run +cap deploy+. If the +repository+ option points to GitHub, this will fail because the server has never verified GitHub's host key.

<plain>
   [[your server's address]] executing command
** [[your server's address] :: err] Host key verification failed.
** [[your server's address] :: err] fatal: The remote end hung up unexpectedly
</plain>

To verify this, run this command:

<ruby>
ssh github.com
</ruby>

This will ask you to verify that GitHub's RSA key fingerprint is +16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48+. If that's correct, type "yes" to the prompt and GitHub's host key will now be verified.

When you run +cap deploy+ again, you'll see this error:

<plain>
    [[your server's address]] executing command
 ** [[your server's address] :: err] Permission denied (publickey).
 ** [[your server's address] :: err] fatal: The remote end hung up unexpectedly
</plain>

This means that your application does not have a deploy key setup for it on GitHub. To set up a deploy key for the application, run this command as the "spree" user on the server:

<shell>
ssh-keygen -t rsa
</shell>

WARNING: Do not enter a password for this key. Otherwise you will need to use it every time you deploy.

Run +cat ~/.ssh/id_rsa.pub+ on the server to get the deploy key. Go to your application's repository on GitHub and go to "Admin", then "Deploy Keys" and enter the whole key into the form there, giving it a memorable name if you ever need it again.


