h2. Spree 0.9.0 Release Notes

endprologue.

h3. Improved Layout Customization

Work has been done to reduce the likelihood of new projects needing to override the default Spree layout template +application.html.erb+. The title, stylesheets, and logo now can all be customized without creating your own copy of the layout.

h4. New title methods

There are some new methods for manipulating the page title: the +title+ and +set_title+ helper methods in Spree::BaseController.

Use +set_title+ to set a page title either from a controller method, or a view template.  You can also override the +default_title+ and +title+ methods in Spree::BaseController for further control.

The +title+ method is used in +application.html.erb+ of the new release, however if you are upgrading and want to take advantage, use this in between your +&lt;title&gt;+ tags of your layout template:
<code>
<%= title %>
</code>

And to set the title in a view template:
<code>
<% set_title 'My custom title' %>
</code>

h4. Customize default stylesheets

+Spree::Config[:stylesheets]+ is a new config option for customizing the stylesheets used by the default application layout.

The value of +Spree::Config[:stylesheets]+ is a comma-separated string of stylesheet names without the file extensions.  See the "customization tutorial":customization_tutorial.html for more information.

If you are upgrading, to take advantage of this use the new +stylesheet_tags+ helper method.

h4. Customize logo

+Spree::Config[:logo]+ is a new config option for customizing the logo image path.

If you are upgrading, take advantage of this by using the new +logo+ helper method.

h3. Polymorphic Calculators

There has been significant refactoring to the implementation of calculators.  Calculators are now polymorphic and belong to +calculable+.  This will have a non trivial impact on your existing store configuration.  After upgrading to Spree 0.9.0 you are likely going to have to make several manual adjustments to the existing tax and shipping configurations.  Ultimately we feel this is outweighed by the superior design of the new calculator system which will allow for a more modular design.

WARNING. Many of the existing calculator extensions are not yet updated to support Spree 0.9.0.  Please check the extension registry to see which versions are supported.  Our goal is to backport most of the useful calculators out there shortly after the release.

All calculators need to implement the following method

<shell>
  def compute(something=nil)

  end    
</shell>

The calculator is passed an optional "target" on which to base their calculation.  This method is expected to return a single numeric value when the calculation is complete.  A value of +nil+ should be returned in the event that a charge is not applicable.

Calculators are also configurable thorugh Spree's flexible "preference system":preferences.html.  Default values for the preferences are configured through the class definition.  For example, the flat rate calculator class definition specifies an amount with a default value of 0.

<shell>
  class Calculator::FlatRate < Calculator
    preference :amount, :decimal, :default => 0
    
    ...
    
  end
</shell>

Spree now contains a standard mechanism by which calculator preferences can be editied.  The screenshot below shows how the amounts for the flat rate calculator are now editable directly in the admin interface.

[INSERT SCREENSHOT HERE]

h3. Simplified Tax Configuration

There are also minor changes to how taxes are configured.  You no longer need to specify sales tax or VAT but you do need to choose a calculator type.  Tax rates are configured as prefefences for the calculator itself.  

WARNING. Your tax rates will be lost when you run the migrations.  You will have to recreate them manually in the admin interface.

h3. Flexible System of Charges and Credits

Spree 0.9.0 provides a new flexible system of charges and credits associated with orders.  The  +orders+ table no longer has separate columns for +tax_total+, +ship_total+, etc.  This information is now captured more generically as a +Charge+.  This allows a Spree application to add more then one tax or shipping charge per order as well as to support new types of charges that might be required.  For instance, some products for sale (like cell phones) require a separate activation fee.

Charges are added to the order in the +Checkout+ model.  Developers wishing to override the default behavior of Spree can now just override the +update_charges+ method to provide their own additional logic.  This snippet below shows how the Spree core adds tax related charges to an order.

<shell>
  def update_charges
    ...

    # update tax (if applicable)
    tax_amount = order.calculate_tax
    if tax_amount > 0                           
      tax_charge = order.tax_charges.first
      tax_charge ||= order.tax_charges.build(:description => I18n.t(:tax))
      tax_charge.amount = tax_amount
      tax_charge.save    
    end

    order.reload
    order.update_totals
    order.save 
  end  
</shell> 

In addition to charges, credits are now supported.  Credits are the mirror image of charges and they serve to reduce the cost of the order.  The primary mechanism for adding a credit to an order is through the use of coupons.  Its possible, however, that developers may wish to build their own custom logic for creating credits.

WARNING. There are significant changes to the database to support the new charge system.  The migrations should update your legacy data and create the necessary tax and shipping charges for existing orders but you should backup your database before running.

h3. Coupons and Discounts

h3. Improved Calculator Configuration

Configuration for shipping calculators has been improved so that most shipping calculators can be easily configured in the admin interface.  The interfaces of your existing shipping calculators will continue to work as before but in order to configure your shipping calculators properly, you'll need to add the relevant "preferences":http://spreecommerce.com/documentation/preferences.html to your calculators.

<shell>
class FlatRateShippingCalculator < ShippingCalculator
  preference :flat_rate_amount, :decimal, :default => 0  

  def calculate_shipping(shipment)
    return self.preferred_flat_rate_amount
  end  
end  
</shell>

[TODO - also mention extending Calculator or whatever depending on final implementation] 

Since calculators are now instances of +ActiveRecord::Base+ they can be configured with preferences.  Each instance of +ShippingMethods+ is now stored in the database along with the configured values for its preferences.  This allows the same calculator (ex. +FlatRateShippingCalculator+) to be used with multiple shipping methods, and yet be configured with different values for each calcaultor (ex. different flat rates per calculator.) 

[INSERT SNAPSHOT HERE]


WARNING. If you are upgrading an existing application, the shipping methods will all be changed to +FlatRateShippingCalculator+.  After running the migrations you must use the admin configuration screen to select a different shipping calcualtor.  You can now also use the admin screen to configure the settings for your new calculator.  

h3. Variant Images



h3. Improvements to image handling

We've upgraded the paperclip gem to take advantage of recent changes. Paperclip is the library which handles creation of and access to the various formats of image. On top of this, we're explicitly catching errors
in the image creation stage and returning these via the validation mechanism - also adding a more 
meaningful message in the +errors+ list. This will avoid the silent failures that some people have experienced when they don't have image magick installed correctly. 

Another change is to store the original image's width and height: this info is sometimes useful when 
working with a set of images with different 'shapes', e.g. where your images might all have a width of 240 but (minor) variation on height. Knowing the height of the original allows you to calculate the max height of your images and thus to create a suitable bounding box. 

Finally, note that the processing tools behind paperclip can do many transformations on the images,
such as cropping, colour adjustment, ... - and these can be requested by passing the options to 
paperclip, or you can run the conversions on a batch of images in advance of loading into Spree. 
Automatic cropping is particularly useful to make best use of screen area. 


h3. Update to SearchLogic

Spree now runs with version 2.1.13 of SearchLogic. It has meant some minor recoding of how searches 
are set up and paginated, and allowed some of the existing forms to be simplified (by taking advantage 
of new functionality) and opened the door to more sophistication in selecting products, e.g. for
handling faceted search or product groups. 

There's an overview of what the new SearchLogic offers on the 
"Spree blog":http://spreecommerce.com/blog/2009/07/30/updating-searchlogic/, and full documentation 
is at "rdoc.info":http://rdoc.info/projects/binarylogic/searchlogic.

