h2. Custom Authentication

This guide covers using a custom authentication setup with Spree, such as one provided by your own application. This is ideal in situations where you want to handle the sign-in or sign-up flow of your application uniquely, outside the realms of what would be possibly with Spree. After reading this guide, you will be familiar with:

* Setting up Spree to work with your custom authentication

endprologue.

h3. Background

Traditionally, applications that use Spree have needed to use the +Spree::User+ model that came with the +spree_auth+ component of Spree. With the advent of 1.2, this is no longer a restriction. The +spree_auth+ component of Spree has been removed and is now purely opt-in. If you have an application that has used the +spree_auth+ component in the past and you wish to continue doing so, you will need to add this extra line to your +Gemfile+:

<ruby>
gem 'spree_auth_devise', :git => "git://github.com/spree/spree_auth_devise"
</ruby>

By having this authentication component outside of Spree, applications that wish to use their own authentication may do so, and applications that have previously used +spree_auth+'s functionality may continue doing so by using this gem.

h4. The User Model

This guide assumes that you have a pre-existing model inside your application that represents the users of your application already. This model could be provided by gems such as "Devise":http://github.com/plataformatec/devise or "Sorcery":https://github.com/NoamB/sorcery. This guide also assumes that the application that this +User+ model exists in is already a Spree application.

This model *does not* need to be called +User+, but for the purposes of this guide the model we will be referring to *will* be called +User+. If your model is called something else, do some mental substitution wherever you see +User+.

h3. Initial Setup

To begin using your custom +User+ class, you must first edit Spree's initializer located at +config/initializers/spree.rb+ by changing this line:

<ruby>
Spree.user_class = "Spree::User"
</ruby>

To this:

<ruby>
Spree.user_class = "User"
</ruby>

Next, you need to run the custom user generator for Spree which will create two files. The first is a migration that will add the necessary Spree fields to your users table, and the second is an extension that lives at +lib/spree/core/controller_helpers_ext.rb+ to the +Spree::Core::ControllerHelpers+ module inside of Spree. 

Run this generator with this command:

<shell>
rails g spree:custom_user User
</shell>

This will tell the generator that you want to use the +User+ class as the class that represents users in Spree. Run the new migration by running this:

<shell>
rake db:migrate
</shell>

Next you will need to define some methods to tell Spree where to find your application's authentication routes.

h3. Controller Helpers

There are some controller helpers of Spree's that you will need to possibly override. The file at +lib/spree/core/controller_helpers_ext.rb+ contains the following code to help you do that:

<ruby>
module Spree
  module Core
    module ControllerHelpers

      def spree_current_user
        current_user
      end

      def spree_login_path
        main_app.login_path
      end

      def spree_signup_path
        main_app.signup_path
      end

      def spree_logout_path
        main_app.logout_path
      end
    end
  end
end
</ruby>

Each of the methods defined in this module return values that are the most common in Rails applications today, but you may need to customize them. In order, they are:

* +**spree_current_user**+: Used to tell Spree what the current user of a request is.
* +**spree_login_path**+: The location of the login/sign in form in your application.
* +**spree_signup_path**+: The location of the sign up form in your application.
* +**spree_logout_path**+: The location of the logout feature of your application.

NOTE: URLs inside the +spree_login_path+, +spree_signup_path+ and +spree_logout_path+ methods *must* have +main_app+ prefixed if they are inside your application. This is because Spree will otherwise attempt to route to a +login_path+, +signup_path+ or +logout_path+ inside of itself, which does not exist. By prefixing with +main_app+, you tell it to look at the application's routes.

h3. The User Model

Inside your +User+ model, you will need to define a few things as well. The first of these is the association to the +spree_roles+ table inside of Spree, which you can do by putting this code inside the class definition of your +User+ model:

<ruby>
has_and_belongs_to_many :spree_roles, :class_name => "Spree::Role", :join_table => "spree_roles_users"
</ruby>

In addition to this association, you will also need to define a +has_spree_role?+ method, like this:

<ruby>
  def has_spree_role?(role_in_question)
    spree_roles.any? { |role| role.name == role_in_question.to_s }
  end
</ruby>

This method is used internally to Spree to check if the user is authorized to perform specific actions, such as accessing the admin section. Admin users of your system should be assigned the Spree admin role, like this:

<ruby>
user = User.find_by_email("master@example.com")
user.spree_roles << Spree::Role.find_or_create_by_name("admin")
</ruby>

h3. Login link

To make the login link appear on Spree pages, you will need to use a Deface override. Create a new file at +app/overrides/auth_login_bar.rb+ and put this content inside it:

<ruby>
Deface::Override.new(:virtual_path => "spree/shared/_nav_bar",
                     :name => "auth_shared_login_bar",
                     :insert_before => "li#search-bar",
                     :partial => "spree/shared/login_bar",
                     :disabled => false, 
                     :original => 'eb3fa668cd98b6a1c75c36420ef1b238a1fc55ad')
</ruby>

This override references a partial called "spree/shared/login_bar". This will live in a new file called +app/views/spree/shared/login_bar.html.erb+ in your application. You may choose to call this file something different, the name is not important. This file will then contain this code:

<erb>
<% if spree_current_user %>
  <li><%= link_to t(:logout), spree_logout_path %></li>
<% else %>
  <li><%= link_to t(:login), spree_login_path %></li>
<% end %>
</erb>

This will then use the URL helpers you have defined in +lib/spree/core/controller_helpers_ext.rb+ to define two links, one to allow users to logout and one to allow them to login from Spree. You may choose to also add a signup route here if you wish.

h3. Signup promotion

In Spree, there is a promotion that acts on the user signup which will not work correctly automatically when you're not using the standard authentication method with Spree. To fix this, you will need to trigger this event after a user has successfully signed up in your application:

<ruby>
fire_event('spree.user.signup', :user => @user, :order => current_order(true))
</ruby>

This line will cause the Spree event notifiers to be notified of this event and to apply any promotions to an order that are triggered once a user signs up.
