h2. Extensions

This guide covers the technical details of extensions and is oriented towards developers. See the "customization guide":customization.html for a more basic treatment on how to customize Spree.

After this guide you should understand:

* The important role extensions play in Spree
* How to install a third party extension
* How to write your own custom extensions
* How to share your extensions with others

endprologue.

h3. The Basics

h4. Overview

Extensions are the primary mechanism for customizing a Spree site.  They provide a convenient mechanism for Spree developers to share reusable code with one another.  Even if you do not plan on sharing your extensions with the community they can still be a useful way to reuse code within your organization.  Extensions are also a convenient mechanism for organizing and isolating discrete chunks of functionality.

WARNING. If you are using a version of Spree prior to version 0.30.x then you should be aware that there have been significant changes to the extension system.  These changes represent a major improvement over the way things used to be done.  For instance, you no longer are required to put your application logic and themes within a "site" extension.

h4. Technical Background

Spree Extensions are based on Rails Engines.  Rails Engines have been around since Rails 2.3 but Rails 3.0 was the first version of Rails that really embraced the concept of engines being advocated by projects such as Spree and "Radiant":http://radiantcms.org.  If you are familiar with the concept of a "Rails Plugin":http://guides.rubyonrails.org/plugins.html then you should have no problem working with extensions.

The Rails Engine support allows developers to ship code as stand-alone "Rubygems":http://rubygems.org that can be added to any Rails application.  These gems can in turn be installed, managed and deployed using the very excellent "bundler":http://gembundler.com tool.  A full discussion of gems and bundler is beyond the scope of this document.

In Rails, an Engine behaves almost identically to a full Rails application.  It has all of the awesome features of Rails including:

* Models, views and controllers
* Database migrations
* Public assets
* Generators
* Rake tasks
* Routes
* Localization
* Tests

Engines therefore become the natural mechanism for providing the same types of modularity for Spree.  In fact a Spree extension is really no more than a Rails engine.  The one common aspect of most Spree extensions, however, is that they all have a dependency on the +spree_core+ gem.  This means they build on certain basic Spree functionality not present in a regular Rails application.

INFO. The +spree_core+ gem is itself a Rails engine and so the entire Spree "stack" is essentially a Rails application built on engines.

h4. The "Core" Extensions

Spree is actually composed of several so-called "core" extensions.  They are referred to as "core" because they provide the core functionality of Spree.  The core extensions are as follows

* spree_api
* spree_auth
* spree-core
* spree_dash
* spree_promo
* spree_sample

Please see the "Source Code Guide":/source_code.html for a more in-depth discussion of the core extensions.

h3. Using Extensions

Now that we've discussed some of the rationale behind extensions, its time to get started using them.  Later in this guide we'll also have a tutorial that will walk you through a detailed example of creating and publishing your own extension.

h4. Installing an Extension

Since extensions are created as engines in Rails, using them is as simple as working with standard plugin gems.  A standard Rails application running Spree will have a +Gemfile+.  This is a special file which is used by "bundler":http://gembundler.com to manage the gem dependencies for your application.

WARNING. Prior to Spree 0.30.0 extensions were not managed as gems.  They were typically installed from the command line using +script/extension install+.  They were then added to the git repository of the application itself and deployed on the server.  This is no longer supported.  You must convert your old extension into a gem in order to use it in Spree.

h5. Modifying Your +Gemfile+

For a gem that is already published on "Rubygems.org":http://rubygems.org you can add it to your +Gemfile+ as follows:

<ruby>
  gem 'spree_related_products', '3.0.2'
</ruby>

Alternatively, you can also use the edge version of a gem stored in a Git repository.

<ruby>
  gem 'spree_related_products', '3.0.2', :git => 'git://github.com/spree/spree-simple-blog.git'
</ruby>

Finally, you could work with the extension directly from your local filesytem

<ruby>
  gem 'spree_related_products', '3.0.2', :path => '../spree_related_products'
</ruby>

NOTE. Using the +path+ directive is an excellent option when actively developing an extension.

h5. Installing the Gem

After you've added the extension to your +Gemfile+ (using one of the techniques outlined above) you then install the gem as follows:

<shell>
  $ bundle install
</shell>

h4. Third-party Extensions

Most extensions are so-called "third party" extensions.  They are written by a party other than the developer working on a particular Spree site and they are intended to be shared with other developers.  Many (but not all) extensions are listed in the "Spree Extension Registry":http://spreecommerce.com/extensions.  This is an excellent source of information on which extensions are available and which versions of Spree they are known (or suspected) to be compatible with.

h4. Creating an Extension

Spree comes with a handy generator for creating a new Spree application.  If you are creating the extension within the context of a Rails application with the Spree gem enabled then this is a breeze.  If you wanted to create a new extension called "foofah" you would create as follows:

<shell>
  $ rails g spree:extension foofah
</shell>

This creates a directory named +foofah+ with all of the necessary files.  It will also automatically modify your +Gemfile+ so that its including the newly created engine/gem.

INFO. For information on testing your extension, please see the "Testing Guide":http://localhost:3000/testing.html#testing-your-extensions.

h4. Sharing Your Extension

h5. Publishing Your Source

The first order of business is to get your extension on "Github":http://github.com where everybody can see it.  Most importantly, you will want to allow others to have access to the source code.  Github provides a convenient (and free) place to store your source code along with the ability to track issues and accept code patches.

INFO. It is convention to use the +spree-+ naming convention for your Github repository and +spree_+ for your gem name.  So for example, if you are creating a "foofah" extension the Github project would be named +spree-foofah+ and the gem would be +spree_fofoah+.

h5. Publishing Your Gem

If your extension is ready to be released into the wild you can publish it as a gem on "RubyGems.org":http://rubygems.org.  Assuming you used the extension generator to build your extension, its already a gem and ready to be published.  You'll just want to edit a few details before you proceed.

s.name        = 'foofah'
s.version     = '1.0.0'
s.summary     = 'Add gem summary here'
#s.description = 'Add (optional) gem description here'
s.required_ruby_version = '>= 1.8.7'

# s.author            = 'David Heinemeier Hansson'
# s.email             = 'david@loudthinking.com'
# s.homepage          = 'http://www.rubyonrails.org'
# s.rubyforge_project = 'actionmailer'

h3. Extension Tutorial

This tutorial assumes a basic familiarity with Spree extensions.  For more detailed information on how extensions, please see the previous sections. The tutorial will, however, walk you through a complete example touching on all of the major aspects of an extension so if you like to learn through "step by step" instructions you may want to start here.

h4. Getting Started

Let’s start by building a simple extension. Suppose we want the ability to mark certain products as part of a promotion. We’d like to add an admin interface for marking certain items as being part of the promotion. We’d also like to highlight these products in our store view. This is a great example of how an extension can be used to build on the solid Spree foundation. We’ll be adding our own custom models, views, controllers, routes and locales via the new extension.

We're going to assume you already have a functioning Spree application.  If you have not yet achieved this you should read the "Getting Started Guide":/getting_started.html first.

So let's start by generating the new extension

<shell>
  $ rails g spree:extension FlagPromotions
</shell>

This creates a +flag_promotions+ directory with several additional files and directories as the following generator output shows:

<ruby>
   create  flag_promotions
   create  flag_promotions/db
   create  flag_promotions/public
   create  flag_promotions/LICENSE
   create  flag_promotions/Rakefile
   create  flag_promotions/README.md
   create  flag_promotions/.gitignore
   create  flag_promotions/flag_promotions.gemspec
   create  flag_promotions/lib/tasks/install.rake
   create  flag_promotions/app
   create  flag_promotions/app/controllers
   create  flag_promotions/app/helpers
   create  flag_promotions/app/models
   create  flag_promotions/app/views
   create  flag_promotions/spec
    exist  flag_promotions/lib
   create  flag_promotions/lib/tasks/flag_promotions.rake
   create  flag_promotions/lib/flag_promotions.rb
   create  flag_promotions/spec/spec_helper.rb
  gemfile  flag_promotions
</ruby>

h4. Creating a Model

Lets create a new +PromotedItem+ model for our extension.  Unfortunately Rails does not yet provide an easy mechanism for generating models, etc. within the context of your extension.  So for now you are left to create the necessary files manually or to use the standard Rails generator and copy the files into your extension.

NOTE. Rails 3.1 will contain better mechanisms for extending the Rails generators so you won't have to resort to manual file creation or other hacks once Spree supports this future release.

The +PromotedItem+ model will represent products that are "flagged" for promotion on the front page along with a schedule of when the promotion begins and ends.

<ruby>
  # flag_promotions/app/models/promoted_item.rb

  class PromotedItem < ActiveRecord::Base

  end
</ruby>

And of course we'll need a corresponding migration.  Until there is an extension migration generator you can use the Rails generator and copy the migration into your extension as a workaround.

<ruby>
  # flag_promotions/db/migrate/20101024002242_create_promoted_items.rb

  class CreatePromotedItems < ActiveRecord::Migration
    def self.up
      create_table :promoted_items do |t|
        t.string :description
        t.references :product
        t.date :start
        t.date :stop
      end
    end

    def self.down
      drop_table :promoted_items
    end
  end
</ruby>

Extension migrations need to be copied from the engine into the main Rails application.  You can do this with a convenient rake task.

<shell>
  $ rake flag_promotions:install
</shell>

NOTE. This also copies over public assets in your engines +public+ directory.  If you just want the migrations you can run +rake flag_promotions:install:migrations+ or if you just want the assets you can run +rake flag_promotions:install:assets+.

INFO. The +install.rake+ file is automatically created for you by the Spree extension generator.  It will only be necessary until Rails 3.1 is released - at which point this task will be provided "automagically."

h4. Creating a Controller and View

Now lets create a new controller file so that we can administer these promoted items.

<ruby>
  # flag_promotions/app/controllers/admin/promoted_items_controller.rb
  class Admin::PromotedItemsController < Admin::BaseController
    resource_controller
  end
</ruby>

You may notice the +resource_controller+ declaration.  This is a gem that allows for simplified implementation of REST methods.  See the gem's "Github project page":http://github.com/jamesgolick/resource_controller for more details.

Lets also add a corresponding admin view for this new resource.

<shell>
  $ cd flag_promotions
  $ mkdir -p app/views/admin
  $ vi promoted_items_controller.html.erb
</shell>

_TODO: Provide some actual view code.  We'll skip it for now since its pretty trivial._

h4. Configure Routes

Your new resource will not be accessible in your Spree application until you map some routing information for it.  So we'll update the +config/routes.rb+ file as follows

<ruby>
  Rails.application.routes.draw do
    namespace :admin do
      resources :promoted_items
    end
  end
</ruby>

We should now be in a position to verify the correct configuration of the extension.  Start your Spree application and then navigate to "http://localhost:3000/admin/promoted_items":#localhost and verify that the view you created is displayed.


---------------------------------------- new tutorial


This tutorial shows the main steps for creating a simple 'extradata' tutorial.
It will be a very basic tutorial, covering only the first steps and introduction to philosophy of writing Spree extensions. Which are now basically Rails 3 engines, so you should feel at home if you tried creating one already.

h4. Generating an Extension

We're assuming you have already created a new Spree application and run the migrations.  If you haven't done so, create a simple application now. Remember about rake db:seed and, maybe, rake db:sample tasks.

Every extension should start with an idea. Let's say we want a very simple extension adding "extradata" text field to main Spree models (Product, Order, Taxon) that will be serialized. I like having a column like that, especially in transitory periods where I need to keep some data relevant to migration from other systems, but don't want to pollute DB schema with many unnecessary (in the long run) fields.

Spree comes with generators for creating your new extensions.  To create a new extension use
<shell>rails g spree:extension <extension_name></shell>

So in the case of our Extradata extension we type
<shell>rails g spree:extension Extradata</shell>

This command generates something like the following output
<ruby>
  create  extradata
  create  extradata/LICENSE
  create  extradata/Rakefile
  create  extradata/README.md
  create  extradata/.gitignore
  create  extradata/extradata.gemspec
  create  extradata/app
  create  extradata/app/controllers
  create  extradata/app/helpers
  create  extradata/app/models
  create  extradata/app/views
  create  extradata/config
  create  extradata/config/database.yml
  create  extradata/config/environments/cucumber.rb
  create  extradata/lib
  create  extradata/lib/tasks/extradata.rake
  create  extradata/lib/extradata.rb
 gemfile  extradata
</ruby>

This creates the Extradata extension gem within +extradata+ subdirectory of your application and one new line within the Gemfile that should look like this
<ruby>
gem "extradata", :path => "extradata", :require => "extradata"
</ruby>

The extension is a first-class gem (and a Rails engine at the same time), residing within app's subdirectory only because it's been generated there. The extension gem is entirely self contained in its directory. Once we're done, we can reuse this gem in other Spree applications by simply copying the +extradata+ folder or (the preferred and "rails" way) publishing it as a gem and then (regardless of the path taken) simply adding a relevant entry in Gemfile pointing to our extension gem.

You can now take some time to take a look through the extension gem's directory. Feel free to amend extradata.gemspec, README.md and LICENSE to your liking.

h4. Extending a model

Extensions allow you to add your own models, controllers, views and helpers to the application. These just go to extradata/app and it's just a matter of loading them (see lib/extradata.rb). However we want something different: we want to extend existing models with some new functionality.

h5. Migration

Let's start with a migration

<shell>rails g migration AddExtradata</shell>

NOTE. This generator should be run within application root, thus creating migration file in +RAILS_ROOT/db/migrate+. Currently (Rails 3.0) Rails Engines don't have their own migrations ran during "master" application's rake db:migrate, but they will soon (Rails 3.1 Mountable Apps). Because of that and for the sake of easy redistribution we will copy the migration file to +RAILS_ROOT/extradata/db/migrate/ for easy redistribution.

Let's edit the contents of the migration file in our favorite text editor. Time to add some columns!
<ruby>
class AddExtradata < ActiveRecord::Migration
  def self.up
    add_column :products, :extradata, :text
    add_column :orders, :extradata, :text
    add_column :taxons, :extradata, :text
  end

  def self.down
    remove_column :products, :extradata
    remove_column :orders, :extradata
    remove_column :taxons, :extradata
  end
end
</ruby>

After saving that file and making sure it applies cleanly (+rake db:migrate+) it's time to copy it into extension's db/migrate

<ruby>
mkdir -p extradata/db/migrate
cp db/migrate/timestamp_add_extradata_to_models.rb extradata/db/migrate/
</ruby>

h5. Model decorator

For the sake of simplicity and not dwelling too deep into Ruby module system, we're going to create files extending relevant Spree models with +Class.class_eval+.

We only need one line in each of Order, Product, Taxon: +serialize :extradata+, so that whatever we set it to (Hash, Array, other objects) Rails will handle (de-)serialization for us transparently. Because our decorators are going to change models, it's a good idea to keep them within +extradata/app/models+ directory.

+extradata/app/models/order_decorator.rb+
<ruby>
Order.class_eval do
  serialize :extradata
end
</ruby>

+extradata/app/models/product_decorator.rb+
<ruby>
Product.class_eval do
  serialize :extradata
end
</ruby>

+extradata/app/models/taxon_decorator.rb+
<ruby>
Taxon.class_eval do
  serialize :extradata
end
</ruby>

Our decorators are ready, but we still need them to be loaded when the master application starts. Or, to be precise: when the gem is loaded and engine is being registered within Rails application.

h4. Loading the engine

Open +extradata/lib/extradata.rb+ and add the lines responsible for loading all decorators within +app/models/+ directory:

<ruby>
require 'spree_core'

module Extradata
  class Engine < Rails::Engine

    config.autoload_paths += %W(#{config.root}/lib)

    def self.activate
      # Activation logic goes here.  A good use for this is performing class_eval on classes that are defined
      # outside of the extension (so that monkey patches are not lost on subsequent requests in development mode.)
      Dir.glob(File.join(File.dirname(__FILE__), "../app/**/*_decorator*.rb")) do |c|
        Rails.env == "production" ? require(c) : load(c)
      end
    end

    config.to_prepare &method(:activate).to_proc
  end
end
</ruby>


h4. Bundling our gem

Run +bundle install+ to make Gem Bundler aware of our extension gem.

h4. Firing it up

Open Rails console (+rails c+) and try it!

<ruby>
$ rails c
Loading development environment (Rails 3.0.0)
ruby-1.9.2-head >   p = Product.first
 => #<Product id: 187438981, name: "Ruby on Rails Ringer T-Shirt", description: "Lorem ipsum dolor sit amet, consectetuer adipiscing...", created_at: "2010-10-07 18:27:38", updated_at: "2010-10-07 18:27:38", permalink: "ruby-on-rails-ringer-t-shirt", available_on: "2010-10-07 18:27:38", tax_category_id: nil, shipping_category_id: nil, deleted_at: nil, meta_description: nil, meta_keywords: nil, count_on_hand: 75, extradata: nil>
ruby-1.9.2-head > p.extradata
 => nil
ruby-1.9.2-head > p.extradata = {"old_id" => 123, "old_category_ids" => [16, 43, 111]}
 => {"old_id"=>123, "old_category_ids"=>[16, 43, 111]}
ruby-1.9.2-head > p.save
 => true
ruby-1.9.2-head > p.extradata
 => {"old_id"=>123, "old_category_ids"=>[16, 43, 111]}
</ruby>

To allow adminstrators to control the extension, we can add a tab to the
admin panel via the +admin_tabs+ hook (see "hooks":theming.html for more information).

Example:

1. adding a new tab to the admin navigation, e.g. in your extension to your_extension_hook.rb
<ruby>
insert_after :admin_tabs do
  "<%= tab(:taxonomies) %>"
end
</ruby>

2. adding routes for your admin controller, e.g., for the taxonomies controller to config/routes.rb
<ruby>
map.namespace :admin do |admin|
  admin.resources :taxonomies
end
</ruby>

3. adding locales in config/locales to, e.g., en_spree.yml
<ruby>
taxonomies: "Taxonomies"
</ruby>

h4. Releasing the extension

If it works, it's time to release it on Github and submit into Spree Extension Directory.





