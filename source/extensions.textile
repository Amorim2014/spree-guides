h2. Extensions

This guide covers the technical details of extensions and is oriented towards developers.
See the "customization overview":customization_overview.html for basic information.
By reading this guide you should learn:

* The role extensions play in a Spree deployment
* How to build a "theme" extension to customize the look and feel of your store
* How to build a "site" extension to tie everything together
* How to write a custom extension
* How to initialize an extension

endprologue.

h3. Overview

Extensions are the main mechanism for extending and customizing Spree-based sites.

If your primary goal is to simply customize Spree for a specific business then you could 
just create a single extension and put all of your custom stuff in there.  If you would like 
to reuse stuff between your own projects, or even share them with the Spree community, then 
it's a good idea to organize your work logically into several self-contained extensions.
Spree supports this way of working, and indeed, you can no doubt benefit from the good 
collection of 3rd party extensions already on offer.

Custom extensions should be placed in the +vendor/extensions+ directory of your project.  
Extensions placed in this directory will be automatically available to your application. 
They are loaded and take precedence according to the "load_order":customization_overview.html#loadorder
you set for the app. Recall that the loading mechanism means that the last-loaded version
of any file is the one that Spree will use, hence you can use extensions to change 
pretty much everything in Spree.

Possibilities include (but are not limited to!):

* overriding of standard views
* adding or removing columns 
* replacing existing migrations with custom versions
* replacing or extending a controller or model
* changing system settings

A good way to learn is to see an example: try the "Spree Demo":http://github.com/railsdog/spree-demo
first.


h4. The "site" extension

When you use the +spree+ command to create a new application, it will
automatically create a +site+ extension for you.  This is where you
should put all of the highly site-specific code (like mail settings
and site branding). 

The "site" name is not important: it is just a recommended convention. 
You can change the name to anything you choose - as long as you update
your extension load order appropriately.

It may seem a little bit strange to put this kind of content into an 
extension (as opposed to a top level directory) but this setup  makes 
upgrading to newer versions of Spree considerably easier.



h3. Creating Your Own Extension

h4. Tutorial

There is a very detailed "extensions tutorial":extension_tutorial.html that will go through a detailed example of how to create your own extension.



h4. Generate the Extension

NOTE. Before you start work, please do consider mailing spree-user with your ideas or plans - you may find that someone else wants to collaborate or has some of the code you need. Also feel free to adapt existing code.

Spree comes with a handy generator so you can easily create your own custom extension.  Suppose we want to create a "Foo" extension.

<shell>
  script/generate extension Foo
</shell>

This will create a series of folders and files, including +foo_extension.rb+, which will 
define a +FooExtension+ class.

INFO. Do not use spaces or dashes when creating a new extension.  If there is more then one word to the extension (such as "Foo Bar") use +script/generate extension FooBar+ instead.


IMPORTANT.  You may need your extension to be loaded at a particular point. See "load_order":customization_overview.html#loadorder for details.


h4. Making the Extension Available on GitHub

You can share your work with others through "GitHub":http://github.com. GitHub is also useful for
managing and archiving projects. You could use other versioning systems and repositories, but 
GitHub is the one we support.
There is a simple naming convention that helps people to find and install your work easily.

If your extension class is named  +FooBar+ and it is defined in +foo_bar_extension.rb+, you should name your GitHub project +spree-foo-bar+.  Notice how there are no spaces or underscores in the GitHub project name and that it is prefixed with +spree+.  The underscores in the filename are replaced with '-' and the word 'extension' does not appear anywhere in the GitHub project name.

INFO. Adopting the suggested naming conventions when adding your extension to GitHub allows people to automatically install it with the special +script/extension install+ command.



h4. Publishing Your Extension in the Spree Extension Registry

Once your extension is doing something useful and you have published it to GitHub, it's time to 
let everyone else know about it.  The best way to do this is to add your extension to Spree's 
"official extension registry":http://ext.spreecommerce.com. This site helps track things like
code versions and updates, and Spree version compatibility. 
There's a tag system and searching to help find relevant extensions.

Announcements on spree-user are also welcome. 

NOTE. GitHub lists about 140 unique Spree-related repositories, but we've only got 50 or so extensions in the registry... Please?


h4. Extending and Collaborating 

You're very welcome to reuse and extend existing code on GitHub, or to offer to collaborate on
existing extension projects. Quite a few high-quality extensions have been developed in these
ways. Try mailing spree-user with your ideas, or try contacting the original developer on GitHub. 

One thing to keep in mind is that extensions are often the result of
a generous donation from one or more of our users.  A typical extension
reflects the code needed to make the extension work at a particular moment
(and for a particular version of Spree.)  Consequently, not all extensions
will work with all versions of Spree.  These extensions are still often
very useful starting points for addressing your own specific needs.
Many times the extension requires only a minor tweak to make it working
with the latest version of Spree.  Other times, the extension is not
listed as being compatible with a particular version of Spree only
because it has yet to be tested.  There may not even be any issues at all - just try it!



h3. Technical Details

h4. Directory structure

Extensions have a directory structure that should look very familiar to you.  They follow essentially the same layout as a standard Rails app.  
<shell>
app
  controllers
  helpers
  models
  views
config
db
  migrate
  seeds.rb
lib
spec
  controllers
  helpers
  models
  spec.opts
  spec_helper
  views
</shell>

So even though your Spree application will not have an +app+ directory, your extensions will.  

NOTE. Reminder on load order and find-last-mentioned?

h4. The activation file

Each extension has a file which 'activates' the extension. A skeleton file is created automatically
as +foo_extension.rb+, with an empty method called +activate+. This method is called when the 
extension is loaded, and can be used to monkey-patch or configure other parts of Spree. For 
example, you can replace methods in a model with your own versions, or extend models with new
associations, or alter a controller's behaviour.


h4. Extension initializers

You can put initializers in extensions, and these are the recommended way to configure certain settings. For example, an initializer in your site extension can set site email addresses and other important Spree settings. The following is the pattern for making the settings: the wrapper copes with the first-run case, before the database is set up, and note the use of +.set+ to update settings.

<code>
if Spree::Config.instance
  Spree::Config.set(:products_per_page => 9)
  Spree::Config.set(:site_name => "Widget Store")
end
</code>

Initializers go in the +config/initializers+ directory in an extension, and should be +.rb+ files.
Such extensions are loaded in extension order (as above) then by alphabetical order within an extension - and they will all be loaded after the main project initialization is done. 

So, if the +site+ extension is loaded last, then +site/config/initializers/beta.rb" is run before 
+site/config/initializers/gamma.rb+, and +other_ext/config/initializers/alpha.rb+ will be loaded 
before both of these (because it is from an earier extension). 


h4. Set up routes 

The extension contains a file called +config/routes.rb+. Like the locales files, this file is 
loaded additively at startup, so you can add extension-specific routes here. For example,

<ruby>
map.resources :products do |product|
  product.resources :reviews 
end
</ruby>



h4. I18n

Extensions can be used to extend or override the I18n translations. Any YML files in the 
+config/locales+ directory will be loaded at startup. 

NOTE. All locale files are loaded - not just the last one in the load order. This allows each extension to add new vocabulary etc. However, overriding does occur at the hash table level: an entry for label X in the core files will be replaced if there's an entry for X in an extension.

Suppose you wanted to change the translation of the +city+ label from term "City / Town" 
to "Hamlet" in the +en-GB+ locale.
Simply add (or edit) the locale file called +config/locale/en-GB.yml+ in your extension to
look like the following. The important first line identifies the particular locale, and
subsequent indented lines give new translations. 

<yaml>
en-GB:
  city: Hamlet  
</yaml>  

Remember that compound keys (like +actions.new+) need tree-like indentation. See the original 
locale files for examples.

Typically you would save your custom locales in the site extension but you might also want to create a stand-alone extension if you were planning on building more then one Spree store and you wished to reuse your custom locale.

INFO. If there is a translation error or missing translation information in one of the existing Spree locales, you should fork the Spree project in GitHub and provide a patch.  See "contributing to spree":contributing_to_spree.html for more details.


h4. Extension models and migrations

Spree can generate models and migrations for your extension. See the usage info by running 
+script/generate extension_model -h+ or +script/generate extension_migration -h+ in your 
application root directory.

<shell>
script/generate extension_migration <extension_name> <migration_name> <migration_arguments...>
</shell>

TIP. +rake db:migrate+ will examine/run all of the extension migrations, as well as the core migrations.

INFO. There are currently some known issues with migrating +DOWN+ using extension migrations.  Since down migrations are rarely useful in the real world, this problem is likely to remain unresolved for a while.  

NOTE. For more information on Rails migrations in general, please see the excellent "rails guide":http://guides.rubyonrails.org/migrations.html on this subject.

h4. Extension controllers

Similarly, you can generate vanilla and admin controllers too. See 
@script/generate extension_controller -h@ for more detail and some examples.


h4. Extension seed data

Extensions can also populate seed data in a way similar to a standard rails app.  Seed data is data that is needed by the application in order for it to work properly.  This is a fairly specialized case and it is not the same as sample data (which is optional). Each extension is created with a file +db/seeds.rb+ which should be modified to load the required data. See Spree's core +db/seeds.rb+
file for an example. Extension seed files (in the declared load order) are executed when 
you run +rake db:seed+





h3. Tips and Tricks

Here's some of the techniques you may need from time to time. Also look at the
"extension tutorial":extension_tutorial.html and "theming tutorial":theming_tutorial.html
for more examples.

Extensions can also modify the checkout workflow.  Please see the guide on the "checkout 
process":checkout.html for detailed information.


h4. Make your extension helper avaliable to all views (helpful if you're using it in a layout override)

Edit the following into +activate+ in +foo_extension.rb+

<ruby>
  Spree::BaseController.class_eval do
    helper FooHelper
  end
</ruby>


h4. Adding Fields to Product or Variants

You may want to add one or more fields to variant and / or product models using an extension. The Variant model has a class method called +additional_fields+ which exposes an array of hash objects, which you can add to from your extension to provide any extra fields that you might need. It's important to note that you should always _append_ or _add_ to this array as you might overwrite fields added from another extension. 

Each field added to this array automatically gets presented on the relevant add / edit admin interfaces, but *you still need to create a migration to added these fields to the relevant tables*.  This is a better approach to simply overriding the admin views in your extension, because it enables multiple extensions to add columns to the product/variant model without having the clash of views.

From your extension class you can add to the variant and / or product models by adding a hash for each value, like:

<ruby>
  Variant.additional_fields += [
    {:name => 'Foo', :only => [:variant], :format => "%.2f"},
    {:name => 'Bar', :only => [:product], :format => "%.2f"},
    {:name => 'Buzz', :populate => [:line_item]}
  ]
</ruby>

In this example the extension would be adding the following fields:

* *Foo* - will be added to the _variant_ model (and formatted to two decimal points)
* *Bar* - will be added to the _product_ model (and formatted to two decimal points)
* *Buzz* - will be added to both the _variant_ and _product_ models. It will also populate the _buzz_ attribute on the _line_item_ model when the product/variant is added to an order(cart).

The supported parameters for the config hash are:

* *:name* - The name of the field to be added, this should match the column added to table (column name will be lowercase)
* *:only* - Defines which models the field has been added to. If no +:only+ key is present it's presumed to be added to both Variant and Product
* *:format* - An sprintf compatible string to be used to format the value.
* *:populate* - If +[:line_item]+ is passed to the +:populate key+, the value will be updated on the line_item when the product / variant is added to an order (i.e. cart). This can be helpful if your field changes frequently, but you'd like to record the value at the time of purchase (like cost price for example).

