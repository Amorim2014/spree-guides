h2. Extensions

This guide covers the technical details of extensions and is oriented towards developers. See the "customization guide":customization.html for a more basic treatment on how to customize Spree.

After this guide you should understand:

* The important role extensions play in Spree
* How to install a third party extension
* How to write your own custom extensions
* How to share your extensions with others

endprologue.

h3. The Basics

h4. Overview

Extensions are the primary mechanism for customizing a Spree site.  They provide a convenient mechanism for Spree developers to share reusable code with one another.  Even if you do not plan on sharing your extensions with the community they can still be a useful way to reuse code within your organization.  Extensions are also a convenient mechanism for organizing and isolating discrete chunks of functionality.

WARNING. If you are using a version of Spree prior to version 0.30.x then you should be aware that there have been significant changes to the extension system.  These changes represent a major improvement over the way things used to be done.  For instance, you no longer are required to put your application logic and themes within a "site" extension.

h4. Technical Background

Spree Extensions are based on Rails Engines.  Rails Engines have been around since Rails 2.3 but Rails 3.0 was the first version of Rails that really embraced the concept of engines being advocated by projects such as Spree and "Radiant":http://radiantcms.org.  If you are familiar with the concept of a "Rails Plugin":http://guides.rubyonrails.org/plugins.html then you should have no problem working with extensions.

The Rails Engine support allows developers to ship code as stand-alone "Rubygems":http://rubygems.org that can be added to any Rails application.  These gems can in turn be installed, managed and deployed using the very excellent "bundler":http://gembundler.com tool.  A full discussion of gems and bundler is beyond the scope of this document.

In Rails, an Engine behaves almost identically to a full Rails application.  It has all of the awesome features of Rails including:

* Models, views and controllers
* Database migrations
* Public assets
* Generators
* Rake tasks
* Routes
* Localization
* Tests

Engines therefore become the natural mechanism for providing the same types of modularity for Spree.  In fact a Spree extension is really no more than a Rails engine.  The one common aspect of most Spree extensions, however, is that they all have a dependency on the +spree_core+ gem.  This means they build on certain basic Spree functionality not present in a regular Rails application.

INFO. The +spree_core+ gem is itself a Rails engine and so the entire Spree "stack" is essentially a Rails application built on engines.

h4. The "Core" Extensions

Spree is actually composed of several so-called "core" extensions.  They are referred to as "core" because they provide the core functionality of Spree.  The core extensions are as follows

* spree_api
* spree_auth
* spree-core
* spree_dash
* spree_promo
* spree_sample

Please see the "Source Code Guide":/source_code.html for a more in-depth discussion of the core extensions.

h3. Using Extensions

Now that we've discussed some of the rationale behind extensions, its time to get started using them.  Later in this guide we'll also have a tutorial that will walk you through a detailed example of creating and publishing your own extension.

h4. Installing an Extension

Since extensions are created as engines in Rails, using them is as simple as working with standard plugin gems.  A standard Rails application running Spree will have a +Gemfile+.  This is a special file which is used by "bundler":http://gembundler.com to manage the gem dependencies for your application.

WARNING. Prior to Spree 0.30.0 extensions were not managed as gems.  They were typically installed from the command line using +script/extension install+.  They were then added to the git repository of the application itself and deployed on the server.  This is no longer supported.  You must convert your old extension into a gem in order to use it in Spree.

h5. Modifying Your +Gemfile+

For a gem that is already published on "Rubygems.org":http://rubygems.org you can add it to your +Gemfile+ as follows:

<ruby>
  gem 'spree_related_products', '3.0.2'
</ruby>

Alternatively, you can also use the edge version of a gem stored in a Git repository.

<ruby>
  gem 'spree_related_products', '3.0.2', :git => 'git://github.com/spree/spree-simple-blog.git'
</ruby>

Finally, you could work with the extension directly from your local filesytem

<ruby>
  gem 'spree_related_products', '3.0.2', :path => '../spree_related_products'
</ruby>

NOTE. Using the +path+ directive is an excellent option when actively developing an extension.

h5. Installing the Gem

After you've added the extension to your +Gemfile+ (using one of the techniques outlined above) you then install the gem as follows:

<shell>
  $ bundle install
</shell>

h4. Third-party Extensions

Most extensions are so-called "third party" extensions.  They are written by a party other than the developer working on a particular Spree site and they are intended to be shared with other developers.  Many (but not all) extensions are listed in the "Spree Extension Registry":http://spreecommerce.com/extensions.  This is an excellent source of information on which extensions are available and which versions of Spree they are known (or suspected) to be compatible with.

h4. Creating an Extension

Spree comes with a handy generator for creating a new Spree application.  If you are creating the extension within the context of a Rails application with the Spree gem enabled then this is a breeze.  If you wanted to create a new extension called "foofah" you would create as follows:

<shell>
  $ rails g spree:extension foofah
</shell>

This creates a directory named +foofah+ with all of the necessary files.  It will also automatically modify your +Gemfile+ so that its including the newly created engine/gem.

INFO. For information on testing your extension, please see the "Testing Guide":http://localhost:3000/testing.html#testing-your-extensions.

h4. Sharing Your Extension

h5. Publishing Your Source

The first order of business is to get your extension on "Github":http://github.com where everybody can see it.  Most importantly, you will want to allow others to have access to the source code.  Github provides a convenient (and free) place to store your source code along with the ability to track issues and accept code patches.

INFO. It is convention to use the +spree-+ naming convention for your Github repository and +spree_+ for your gem name.  So for example, if you are creating a "foofah" extension the Github project would be named +spree-foofah+ and the gem would be +spree_fofoah+.

h5. Publishing Your Gem

If your extension is ready to be released into the wild you can publish it as a gem on "RubyGems.org":http://rubygems.org.  Assuming you used the extension generator to build your extension, its already a gem and ready to be published.  You'll just want to edit a few details before you proceed.

s.name        = 'foofah'
s.version     = '1.0.0'
s.summary     = 'Add gem summary here'
#s.description = 'Add (optional) gem description here'
s.required_ruby_version = '>= 1.8.7'

# s.author            = 'David Heinemeier Hansson'
# s.email             = 'david@loudthinking.com'
# s.homepage          = 'http://www.rubyonrails.org'
# s.rubyforge_project = 'actionmailer'

h3. Extension Tutorial



Extensions are the main mechanism for extending and customizing Spree-based sites.

If your primary goal is to simply customize Spree for a specific business then you could
just create a single extension and put all of your custom stuff in there.  If you would like
to reuse stuff between your own projects, or even share them with the Spree community, then
it's a good idea to organize your work logically into several self-contained extensions.
Spree supports this way of working, and indeed, you can no doubt benefit from the good
collection of 3rd party extensions already on offer.

Custom extensions should be placed in the +vendor/extensions+ directory of your project.
Extensions placed in this directory will be automatically available to your application.
They are loaded and take precedence according to the "load_order":customization_overview.html#loadorder
you set for the app. Recall that the loading mechanism means that the last-loaded version
of any file is the one that Spree will use, hence you can use extensions to change
pretty much everything in Spree.

Possibilities include (but are not limited to!):

* overriding of standard views
* adding or removing columns
* replacing existing migrations with custom versions
* replacing or extending a controller or model
* changing system settings

A good way to learn is to see an example: try the "Spree Demo":http://github.com/railsdog/spree-demo
first.


h4. The "site" extension

When you use the +spree+ command to create a new application, it will
automatically create a +site+ extension for you.  This is where you
should put all of the highly site-specific code (like mail settings
and site branding).

The "site" name is not important: it is just a recommended convention.
You can change the name to anything you choose - as long as you update
your extension load order appropriately.

It may seem a little bit strange to put this kind of content into an
extension (as opposed to a top level directory) but this setup  makes
upgrading to newer versions of Spree considerably easier.



h3. Creating Your Own Extension

h4. Tutorial

There is a very detailed "extensions tutorial":extension_tutorial.html that will go through a detailed example of how to create your own extension.



h4. Generate the Extension

NOTE. Before you start work, please do consider mailing spree-user with your ideas or plans - you may find that someone else wants to collaborate or has some of the code you need. Also feel free to adapt existing code.

Spree comes with a handy generator so you can easily create your own custom extension.  Suppose we want to create a "Foo" extension.

<shell>
  script/generate extension Foo
</shell>

This will create a series of folders and files, including +foo_extension.rb+, which will
define a +FooExtension+ class.

INFO. Do not use spaces or dashes when creating a new extension.  If there is more then one word to the extension (such as "Foo Bar") use +script/generate extension FooBar+ instead.


IMPORTANT.  You may need your extension to be loaded at a particular point. See "load_order":customization_overview.html#loadorder for details.


h4. Making the Extension Available on GitHub

You can share your work with others through "GitHub":http://github.com. GitHub is also useful for
managing and archiving projects. You could use other versioning systems and repositories, but
GitHub is the one we support.
There is a simple naming convention that helps people to find and install your work easily.

If your extension class is named  +FooBar+ and it is defined in +foo_bar_extension.rb+, you should name your GitHub project +spree-foo-bar+.  Notice how there are no spaces or underscores in the GitHub project name and that it is prefixed with +spree+.  The underscores in the filename are replaced with '-' and the word 'extension' does not appear anywhere in the GitHub project name.

INFO. Adopting the suggested naming conventions when adding your extension to GitHub allows people to automatically install it with the special +script/extension install+ command.



h4. Publishing Your Extension in the Spree Extension Registry

Once your extension is doing something useful and you have published it to GitHub, it's time to
let everyone else know about it.  The best way to do this is to add your extension to Spree's
"official extension registry":http://ext.spreecommerce.com. This site helps track things like
code versions and updates, and Spree version compatibility.
There's a tag system and searching to help find relevant extensions.

Announcements on spree-user are also welcome.

NOTE. GitHub lists about 140 unique Spree-related repositories, but we've only got 50 or so extensions in the registry... Please?


h4. Extending and Collaborating

You're very welcome to reuse and extend existing code on GitHub, or to offer to collaborate on
existing extension projects. Quite a few high-quality extensions have been developed in these
ways. Try mailing spree-user with your ideas, or try contacting the original developer on GitHub.

One thing to keep in mind is that extensions are often the result of
a generous donation from one or more of our users.  A typical extension
reflects the code needed to make the extension work at a particular moment
(and for a particular version of Spree.)  Consequently, not all extensions
will work with all versions of Spree.  These extensions are still often
very useful starting points for addressing your own specific needs.
Many times the extension requires only a minor tweak to make it working
with the latest version of Spree.  Other times, the extension is not
listed as being compatible with a particular version of Spree only
because it has yet to be tested.  There may not even be any issues at all - just try it!



h3. Technical Details

h4. Directory structure

Extensions have a directory structure that should look very familiar to you.  They follow essentially the same layout as a standard Rails app.
<shell>
app
  controllers
  helpers
  models
  views
config
db
  migrate
  seeds.rb
lib
spec
  controllers
  helpers
  models
  spec.opts
  spec_helper
  views
</shell>

So even though your Spree application will not have an +app+ directory, your extensions will.

NOTE. Reminder on load order and find-last-mentioned?

h4. The activation file

Each extension has a file which 'activates' the extension. A skeleton file is created automatically
as +foo_extension.rb+, with an empty method called +activate+. This method is called when the
extension is loaded, and can be used to monkey-patch or configure other parts of Spree. For
example, you can replace methods in a model with your own versions, or extend models with new
associations, or alter a controller's behaviour.


h4. Extension initializers

You can put initializers in extensions, and these are the recommended way to configure certain settings. For example, an initializer in your site extension can set site email addresses and other important Spree settings. The following is the pattern for making the settings: the wrapper copes with the first-run case, before the database is set up, and note the use of +.set+ to update settings.

<code>
if Spree::Config.instance
  Spree::Config.set(:products_per_page => 9)
  Spree::Config.set(:site_name => "Widget Store")
end
</code>

Initializers go in the +config/initializers+ directory in an extension, and should be +.rb+ files.
Such extensions are loaded in extension order (as above) then by alphabetical order within an extension - and they will all be loaded after the main project initialization is done.

So, if the +site+ extension is loaded last, then +site/config/initializers/beta.rb" is run before
+site/config/initializers/gamma.rb+, and +other_ext/config/initializers/alpha.rb+ will be loaded
before both of these (because it is from an earier extension).


h4. Set up routes

The extension contains a file called +config/routes.rb+. Like the locales files, this file is
loaded additively at startup, so you can add extension-specific routes here. For example,

<ruby>
map.resources :products do |product|
  product.resources :reviews
end
</ruby>



h4. I18n

Extensions can be used to extend or override the I18n translations. Any YML files in the
+config/locales+ directory will be loaded at startup.

NOTE. All locale files are loaded - not just the last one in the load order. This allows each extension to add new vocabulary etc. However, overriding does occur at the hash table level: an entry for label X in the core files will be replaced if there's an entry for X in an extension.

Suppose you wanted to change the translation of the +city+ label from term "City / Town"
to "Hamlet" in the +en-GB+ locale.
Simply add (or edit) the locale file called +config/locale/en-GB.yml+ in your extension to
look like the following. The important first line identifies the particular locale, and
subsequent indented lines give new translations.

<yaml>
en-GB:
  city: Hamlet
</yaml>

Remember that compound keys (like +actions.new+) need tree-like indentation. See the original
locale files for examples.

Typically you would save your custom locales in the site extension but you might also want to create a stand-alone extension if you were planning on building more then one Spree store and you wished to reuse your custom locale.

INFO. If there is a translation error or missing translation information in one of the existing Spree locales, you should fork the Spree project in GitHub and provide a patch.  See "contributing to spree":contributing_to_spree.html for more details.


h4. Extension models and migrations

Spree can generate models and migrations for your extension. See the usage info by running
+script/generate extension_model -h+ or +script/generate extension_migration -h+ in your
application root directory.

<shell>
script/generate extension_migration <extension_name> <migration_name> <migration_arguments...>
</shell>

TIP. +rake db:migrate+ will examine/run all of the extension migrations, as well as the core migrations.

INFO. There are currently some known issues with migrating +DOWN+ using extension migrations.  Since down migrations are rarely useful in the real world, this problem is likely to remain unresolved for a while.

NOTE. For more information on Rails migrations in general, please see the excellent "rails guide":http://guides.rubyonrails.org/migrations.html on this subject.

h4. Extension controllers

Similarly, you can generate vanilla and admin controllers too. See
@script/generate extension_controller -h@ for more detail and some examples.


h4. Extension seed data

Extensions can also populate seed data in a way similar to a standard rails app.  Seed data is data that is needed by the application in order for it to work properly.  This is a fairly specialized case and it is not the same as sample data (which is optional). Each extension is created with a file +db/seeds.rb+ which should be modified to load the required data. See Spree's core +db/seeds.rb+
file for an example. Extension seed files (in the declared load order) are executed when
you run +rake db:seed+





h3. Tips and Tricks

Here's some of the techniques you may need from time to time. Also look at the
"extension tutorial":extension_tutorial.html and "theming tutorial":theming_tutorial.html
for more examples.

Extensions can also modify the checkout workflow.  Please see the guide on the "checkout
process":checkout.html for detailed information.


h4. Make your extension helper avaliable to all views (helpful if you're using it in a layout override)

Edit the following into +activate+ in +foo_extension.rb+

<ruby>
  Spree::BaseController.class_eval do
    helper FooHelper
  end
</ruby>


h4. Adding Fields to Product or Variants

You may want to add one or more fields to variant and / or product models using an extension. The Variant model has a class method called +additional_fields+ which exposes an array of hash objects, which you can add to from your extension to provide any extra fields that you might need. It's important to note that you should always _append_ or _add_ to this array as you might overwrite fields added from another extension.

Each field added to this array automatically gets presented on the relevant add / edit admin interfaces, but *you still need to create a migration to added these fields to the relevant tables*.  This is a better approach to simply overriding the admin views in your extension, because it enables multiple extensions to add columns to the product/variant model without having the clash of views.

From your extension class you can add to the variant and / or product models by adding a hash for each value, like:

<ruby>
  Variant.additional_fields += [
    {:name => 'Foo', :only => [:variant], :format => "%.2f"},
    {:name => 'Bar', :only => [:product], :format => "%.2f"},
    {:name => 'Buzz', :populate => [:line_item]}
  ]
</ruby>

In this example the extension would be adding the following fields:

* *Foo* - will be added to the _variant_ model (and formatted to two decimal points)
* *Bar* - will be added to the _product_ model (and formatted to two decimal points)
* *Buzz* - will be added to both the _variant_ and _product_ models. It will also populate the _buzz_ attribute on the _line_item_ model when the product/variant is added to an order(cart).

The supported parameters for the config hash are:

* *:name* - The name of the field to be added, this should match the column added to table (column name will be lowercase)
* *:only* - Defines which models the field has been added to. If no +:only+ key is present it's presumed to be added to both Variant and Product
* *:format* - An sprintf compatible string to be used to format the value.
* *:populate* - If +[:line_item]+ is passed to the +:populate key+, the value will be updated on the line_item when the product / variant is added to an order (i.e. cart). This can be helpful if your field changes frequently, but you'd like to record the value at the time of purchase (like cost price for example).


h3. Further Reading

"Steph Powell":http://github.com/stephp has an interesting post in the
"Endpoint blog":http://blog.endpoint.com/ which discusses
"shopping cart customization":http://blog.endpoint.com/2009/10/rails-approach-to-spree-shopping-cart.html.
Steph has written several extensions for Spree, many of which are on
"GitHub":http://github.com/stephp.
