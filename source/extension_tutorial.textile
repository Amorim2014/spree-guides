h2. Extension Tutorial

This tutorial shows the main steps for creating a simple 'extradata' tutorial.
It will be a very basic tutorial, covering only the first steps and introduction to philosophy of writing Spree extensions. Which are now basically Rails 3 engines, so you should feel at home if you tried creating one already.

endprologue.


h3. Generating an Extension

We're assuming you have already created a new Spree application and run the migrations.  If you haven't done so, create a simple application now. Remember about rake db:seed and, maybe, rake db:sample tasks.

Every extension should start with an idea. Let's say we want a very simple extension adding "extradata" text field to main Spree models (Product, Order, Taxon) that will be serialized. I like having a column like that, especially in transitory periods where I need to keep some data relevant to migration from other systems, but don't want to pollute DB schema with many unnecessary (in the long run) fields.

Spree comes with generators for creating your new extensions.  To create a new extension use
<shell>rails g spree:extension <extension_name></shell>

So in the case of our Extradata extension we type
<shell>rails g spree:extension Extradata</shell>

This command generates something like the following output
<ruby>
  create  extradata
  create  extradata/LICENSE
  create  extradata/Rakefile
  create  extradata/README.md
  create  extradata/.gitignore
  create  extradata/extradata.gemspec
  create  extradata/app
  create  extradata/app/controllers
  create  extradata/app/helpers
  create  extradata/app/models
  create  extradata/app/views
  create  extradata/config
  create  extradata/config/database.yml
  create  extradata/config/environments/cucumber.rb
  create  extradata/lib
  create  extradata/lib/tasks/extradata.rake
  create  extradata/lib/extradata.rb
 gemfile  extradata
</ruby>

This creates the Extradata extension gem within +extradata+ subdirectory of your application and one new line within the Gemfile that should look like this
<ruby>
gem "extradata", :path => "extradata", :require => "extradata"
</ruby>

The extension is a first-class gem (and a Rails engine at the same time), residing within app's subdirectory only because it's been generated there. The extension gem is entirely self contained in its directory. Once we're done, we can reuse this gem in other Spree applications by simply copying the +extradata+ folder or (the preferred and "rails" way) publishing it as a gem and then (regardless of the path taken) simply adding a relevant entry in Gemfile pointing to our extension gem.

You can now take some time to take a look through the extension gem's directory. Feel free to amend extradata.gemspec, README.md and LICENSE to your liking.

h3. Extending a model

Extensions allow you to add your own models, controllers, views and helpers to the application. These just go to extradata/app and it's just a matter of loading them (see lib/extradata.rb). However we want something different: we want to extend existing models with some new functionality.

h4. Migration

Let's start with a migration

<shell>rails g migration AddExtradata</shell>

NOTE. This generator should be run within application root, thus creating migration file in +RAILS_ROOT/db/migrate+. Currently (Rails 3.0) Rails Engines don't have their own migrations ran during "master" application's rake db:migrate, but they will soon (Rails 3.1 Mountable Apps). Because of that and for the sake of easy redistribution we will copy the migration file to +RAILS_ROOT/extradata/db/migrate/ for easy redistribution.

Let's edit the contents of the migration file in our favorite text editor. Time to add some columns!
<ruby>
class AddExtradata < ActiveRecord::Migration
  def self.up
    add_column :products, :extradata, :text
    add_column :orders, :extradata, :text
    add_column :taxons, :extradata, :text
  end

  def self.down
    remove_column :products, :extradata
    remove_column :orders, :extradata
    remove_column :taxons, :extradata
  end
end
</ruby>

After saving that file and making sure it applies cleanly (+rake db:migrate+) it's time to copy it into extension's db/migrate

<ruby>
mkdir -p extradata/db/migrate
cp db/migrate/timestamp_add_extradata_to_models.rb extradata/db/migrate/
</ruby>

h4. Model decorator

For the sake of simplicity and not dwelling too deep into Ruby module system, we're going to create files extending relevant Spree models with +Class.class_eval+.

We only need one line in each of Order, Product, Taxon: +serialize :extradata+, so that whatever we set it to (Hash, Array, other objects) Rails will handle (de-)serialization for us transparently. Because our decorators are going to change models, it's a good idea to keep them within +extradata/app/models+ directory.

+extradata/app/models/order_decorator.rb+
<ruby>
Order.class_eval do
  serialize :extradata
end
</ruby>

+extradata/app/models/product_decorator.rb+
<ruby>
Product.class_eval do
  serialize :extradata
end
</ruby>

+extradata/app/models/taxon_decorator.rb+
<ruby>
Taxon.class_eval do
  serialize :extradata
end
</ruby>

Our decorators are ready, but we still need them to be loaded when the master application starts. Or, to be precise: when the gem is loaded and engine is being registered within Rails application.

h3. Loading the engine

Open +extradata/lib/extradata.rb+ and add the lines responsible for loading all decorators within +app/models/+ directory:

<ruby>
require 'spree_core'

module Extradata
  class Engine < Rails::Engine

    config.autoload_paths += %W(#{config.root}/lib)

    def self.activate
      # Activation logic goes here.  A good use for this is performing class_eval on classes that are defined
      # outside of the extension (so that monkey patches are not lost on subsequent requests in development mode.)
      Dir.glob(File.join(File.dirname(__FILE__), "../app/**/*_decorator*.rb")) do |c|
        Rails.env == "production" ? require(c) : load(c)
      end
    end

    config.to_prepare &method(:activate).to_proc
  end
end
</ruby>


h3. Bundling our gem

Run +bundle install+ to make Gem Bundler aware of our extension gem.

h3. Firing it up

Open Rails console (+rails c+) and try it!

<ruby>
$ rails c
Loading development environment (Rails 3.0.0)
ruby-1.9.2-head >   p = Product.first
 => #<Product id: 187438981, name: "Ruby on Rails Ringer T-Shirt", description: "Lorem ipsum dolor sit amet, consectetuer adipiscing...", created_at: "2010-10-07 18:27:38", updated_at: "2010-10-07 18:27:38", permalink: "ruby-on-rails-ringer-t-shirt", available_on: "2010-10-07 18:27:38", tax_category_id: nil, shipping_category_id: nil, deleted_at: nil, meta_description: nil, meta_keywords: nil, count_on_hand: 75, extradata: nil>
ruby-1.9.2-head > p.extradata
 => nil
ruby-1.9.2-head > p.extradata = {"old_id" => 123, "old_category_ids" => [16, 43, 111]}
 => {"old_id"=>123, "old_category_ids"=>[16, 43, 111]}
ruby-1.9.2-head > p.save
 => true
ruby-1.9.2-head > p.extradata
 => {"old_id"=>123, "old_category_ids"=>[16, 43, 111]}
</ruby>

To allow adminstrators to control the extension, we can add a tab to the
admin panel via the +admin_tabs+ hook (see "hooks":theming.html for more information).

Example:

1. adding a new tab to the admin navigation, e.g. in your extension to your_extension_hook.rb
<ruby>
insert_after :admin_tabs do
  "<%= tab(:taxonomies) %>"
end
</ruby>

2. adding routes for your admin controller, e.g., for the taxonomies controller to config/routes.rb
<ruby>
map.namespace :admin do |admin|
  admin.resources :taxonomies
end
</ruby>

3. adding locales in config/locales to, e.g., en_spree.yml
<ruby>
taxonomies: "Taxonomies"
</ruby>

h3. Releasing the extension

If it works, it's time to release it on Github and submit into Spree Extension Directory.
