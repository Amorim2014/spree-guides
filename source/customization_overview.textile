h2. Customization Overview

This guide introduces the extension mechanism used to add functionality to Spree and to customize it to a new site design. It discusses the basic ideas behind extensions. 

* How Spree is customized
* What an extension is, and how to control load order
* How the extension mechanism works
* Installing a 3rd party extension

endprologue.

h3. Customizing Spree

Spree contains a powerful extension mechanism.  This allows us to focus on our mission of building a
solid foundation that addresses 90% of the commerce problem.  Extensions address the remaining 10%.
Extensions provide a logical and consistent way for Spree users to supply any required extra functionality in their application, or to completely change the appearance of their site.  
Extensions are designed in a way that should be highly intuitive to the experienced Rails programmer.  They also provide a convenient way for users to develop and share extensions with other members of the Spree community.

The Spree extension mechanism was based extensively on the work of the "Radiant":http://radiantcms.org community.  The Radiant CMS project has a very similar design philosophy ("no fluff") and has already solved the problem in a very elegant fashion.

There's a growing number of extensions in the "Spree Extension 
Registry":http://ext.spreecommerce.com/ for you to install, or you can try out work in progress
by looking on source repositories (like "github.com":http://github.com). As theme support 
develops, we expect to have access to a wide set of themes too.

Creating and installing extensions is simple. All extensions live in +vendor/extensions/+ 
in your project directory. There's a generator for creating a new extension, and a mechanism
for installing existing extensions from the internet, or you can copy extensions manually.

TIP. A very good way to learn about these ideas is to experiment with real code! The "Spree Demo":http://github.com/railsdog/spree-demo is a good place to start (wait for updates)


h3. What is an extension?

Each extension is like a mini Rails project, with similar directory structure, which allows you 
to add new files OR to over-ride existing files. You can add or over-ride pretty much anything.

In fact, part of Spree is itself implemented with extensions (which we call _core extensions_):
this is functionality that we've been able to abstract out of the 'kernel', such as the payment 
gateway support.


h4. Extension load order

Extensions are loaded in a particular order. This is essential so that over-rides work in a 
predictable way. The default order is to load the +:localization+ and +:theme_default+ 
core extensions first, and the +:site+ extension last, and everything else inbetween in alphabetical
order. 

You can modify this order by adding a file +config/preinitializer.rb+ containing something like the
following.
The +:all+ symbol represents everything else not otherwise loaded, taken in alphabetical order
from the core extensions and the extensions in your +vendor/extensions+ directory. The other
symbols are just the names of the relevant extension directories.
So this example loads the default theme first, the site extension last, and loads
extension 'foo' before the remainder. (This pattern is useful if 'foo' sets up something
that a later extension requires.)

<code>
SPREE_EXTENSIONS_LOAD_ORDER = [:theme_default, :foo, :all, :site]
</code>


h4. Hooks and over-rides

It's important to understand the key principles of these ideas in order to appreciate how 
extensions work together and what they might contain. Further detail is given in the
"extensions guide":extensions.html.

When Spree needs a file, e.g. +app/views/products/show.html+ (which controls presentation of a 
single product's information), it looks for the file in the Spree core directory then in the
extension directories _in the declared load order_. It uses the file which is latest in the 
load order. So, if there was a version of this file in the +:site+ extension, it would mask
or take priority over any other versions. 
In this way, later-loaded extensions can take control of most aspects of an application, and 
make unlimited changes to the default functionality or appearance of results.

However, replacing whole files just to change a small number of lines is not good practice.
It can lead to a maintenance nightmare, for one thing. We also find that developers often
want to make just minor changes or additions to certain components of Spree, e.g. small tweaks
to how a product is described. To support this, Spree has a 'hook' system. This allows
developers to implement their changes just by supplying small blocks of code, so removes the
need to duplicate whole files. 


h4. Core extensions

You will sometimes see mention of _core extensions_: these are extensions that core Spree uses 
to add certain functionality which can be separated from the 'inner core' and is not necessary 
in all applications. (See: the extension mechanism is powerful enough for this too.)
The current extensions shipped with Spree are:

* +:theme_default+ - the standard "look and feel" of Spree
* +:localization+ - provides the 'language bar' and ability to change the language for messages
* +:calculators+ - various functionality for computing charges, coupons, etc
* +:overview_dashboard+ - various information about recent orders and activity for the admin pages
* +:api+ - allows secure remote access to some of the site's information
* +:payment_gateway+ - supports processing of payments through a number of gateways


h4. A 'theme' extension

The default content and appearance of Spree pages is entirely provided by a core extension called
+:theme_default+. This contains the views with related helpers, css/less, images, and javascript.
We've pulled this code into an extension to make it clear which files control the presentation,
and to encourage development of alternative themes.

Developers can modify the appearance by over-riding the theme files in their own extensions. If
extensive modifications are required, we suggest that the view files and related components
should be packaged into a stand-alone theme extension. We hope that developers will, in time,
make their themes available (for free or otherwise), as is done with other tools.



h4. The 'site' extension

Each Spree project is created with a 'site' extension. This extension is intended to pull together
elements of the other extensions and provide highly site-specific functionality - mail settings
and site 'brand' elements are good examples.
To promote reuse and simplify maintenance, we suggest that you keep the site extensions 
simple, e.g. doing most of the customization in your own theme extension. 

See the "Spree Demo":http://github.com/railsdog/spree-demo/tree for a good example.

Technically, there is nothing special about the site extension. It is just a naming convention.
Every Spree application will probably need one so we have provided a convenient default.
You can rename this extension whatever you wish - just adjust the load order correspondingly.


h3. Installing an Existing Extension

Installing extensions is simple enough since they are typically stored in GitHub. The command is
similar to that for installing a Rails plugin:

<shell>
script/extension install git://github.com/developer/whatever.git
</shell>

You need to replace +developer+ and +whatever+ with the actual extension author 
and name respectively.

The "Spree Extension Registry":http://ext.spreecommerce.com/ contains several useful extensions.
You can also "search +github+":http://github.com/search?q=spree- - notice the convention that
extensions names follow the pattern 'spree-FOO'.

