h2. Contributing to Spree

Spree is an open source project.  Anyone can use the code, but more importantly, anyone can contribute.  This is a group effort and we value your input.  Please consider making a contribution to help improve the Spree project.  This guide covers:

* How to file a ticket when you discover a bug
* How to contribute fixes and improvements to the core
* Information on how to improve the documentation

endprologue.

h3. Who Can Contribute?

Spree is an open source project and as such contributions are always welcome.  Our community is one which encourages involvement from all developers regardless of their ability level.  We ask that you be patient with the other members of the community and maintain a respectful attitude towards other people's work.  Open source is a great way to learn a new technology so don't be afraid to jump right in, even if you are new to Ruby/Rails.

WARNING. We have an official contribution policy.  Please not just send us Github pull requests - they will be ignored.  We will happily accept your contribution but please read this document carefully before contributing.  

h3. Contributing to the Core

The core is the basic foundation of the Spree project.  It is maintained in Github under the "railsdog/spree":http://github.com/railsdog/spree/tree/master project.  There is a "core team":http://spreecommerce.com/core_team of developers who are responsible for maintaining the quality of the source code.  Your changes will ultimately need to be merged into the official project by a core member.  Thanks to "Github":http://github.com, however, you do not have to wait for a core member to get started with your fix.

h4. Quick Overview

# Create a ticket in Lighthouse
# Create a branch for each ticket 
# Note the ticket # in your commit
# Push the commit to your remote branch
# Merge the commit to your master and push to Github 

h4. One Time Steps

Please perform the following one time steps for your fork in Github.  

h5. Create a Remote Reference in Git to Railsdog

You will need to create a fork of the Spree project in Github.  This is a pretty self explanatory process.  After you have done this and cloned your repository you will need to add a reference to the official repository (railsdog).

<shell>
git remote add railsdog git://github.com/railsdog/spree.git  
</shell>  

WARNING. Its important that you add this reference.  Its a one time step that will allow you to easily create branches based on the most recent version of the official code. 

h5. Add a Service Hook to Your Fork in Github

Click the +Admin+ tab in your Github project and then click the +Service Hooks+ menu option.  Please add the following "Post-Receive URL"

<shell>
  http://github.spreecommerce.com
</shell>

This allows your fork to communicate your changes back to our Lighthouse issue tracker.  Later in this guide, we'll explain the Git commit message convention you need to follow in order to make this happen.

h4. For Each Contribution

h5. Create a Ticket in Lighthouse

The Spree development team is using "Light House":http://railsdog.lighthouseapp.com/projects/31096-spree/overview for tracking all issue and feature requests. Use it to browse the existing tickets or to submit a new issue.  All changes to the core should flow through this system. Please file an issue before you commit your code so that you can then reference the issue number in your commit.  We get a high volume of contributions, so taking a second to create the LH issue helps us to keep track of your bug reports and fixes so that they do not get lost in the shuffle.

WARNING. Do not submit pull requests in Github.  Do not send bug reports to the spree-user list.  In both cases you will be politely asked to file an issue in Lighthouse.  We need to deal with these matters in the most efficient way possible - we're not trying to be difficult.

h5. Create a Clean Branch for Each Issue

Git branches are "cheap."  Creating branches in Git is incredibly easy and its an ideal way to isolate a specific set of changes.  You may be fixing several things at one time but by keeping your changes isolated it will help us to find and apply only the changes we're interested in.  You should create a clean branch based on the latest +railsdog/master+ when doing this.  It is important you follow these steps exactly, it will prevent you from accidentally including unrelated changes from your local copy into the branch.

For example, if we were submitting a patch to issue #525 which provided thai localization we would create the branch as follows:

<shell>
git fetch railsdog  
git checkout -b 525-add-thai-localization --track railsdog/master 
</shell>

The +fetch+ command will grab all of the latest commits on railsdog.  Don't worry, it doesn't merge them into your current branch or anything.  This is just making sure that you have a complete copy of the railsdog source.  The commits will be stored behind the scenes, your local code will remain as it was.

The +track+ part of the command will tell git that this branch should track with the remote version of railsdog master.  This is another way of saying that the branch should be based on a clean copy of the latest source code.  
	
h5. Add the Issue Number to Your Commits

When you're ready to commit be sure to add the issue number in your commit message.  It is suggested that you just use +git commit+ without the +-m+ option.  This will allow you to view the commit message in your editor and add some line spacing for readability.  Here's an example of a commit message.  

<shell>
Provided a Thai localization.

[#525]
</shell>

Please be sure to include the issue number inside of brackets.  This will make sure that Lighthouse will be notified of the changeset when you push to Github.  It will also automatically change the ticket state to "patched" which will help us to prioritize issues where users have supplied a fix.  Note also the blank line between the comment and the issue number.  This helps with readability.

h5. Push to a Remote Branch in Github 

<shell>
git push origin 525-add-thai-localization   
</shell>


h3. Contributing to the Documentation

Improvements to the documentation is encouraged.  The primary source of documentation are the guides (_HINT: You are reading them now._)  The documentation is in its own GitHub project called "spree-guides":http://github.com/railsdog/spree-guides/tree/master.  To build the documentation normally simply clone and install.

<shell>
  $ git clone git://github.com/railsdog/spree-guides.git
  $ cd spree guides
  $ rake guides
</shell>

INFO. You will also need to install the RedCloth gem (4.1.1 or greater) if you do not done so.

You do not need to fork the spree-guides project in order to contribute.  Just send an email to "spree-user":http://groups.google.com/group/spree-user (be sure to include your github username) and say that you would like to contribute.  We'll add you to the list so you can commit directly to the guides project.  

WARNING. Please be considerate when making changes to the spree-guides.  If you wish to make major changes to how the documentation is organized then you should use a GitHub fork and ask people to review your proposed changes instead.

h3. Contributing to Extensions

Extensions include specialized functionality that is provided as a third party add-on to Spree.  We're in the process of implementing guidelines for contributing to extensions.  Please check back later for more detailed guidelines.