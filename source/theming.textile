h2. Theming

This guide contains a tutorial for the development of an extension to customize the appearance of the standard Spree installation. After reading this guide you should learn:

* How to build a "site" extension to customize the look of your store
* How to include custom stylesheets, javascript, or images
* How to override Spree's templates
* How to insert content into Spree's templates using hooks

endprologue.

h3. Theme extensions

Themes in Spree are implemented as extensions. Please refer to the "extensions guide":extensions.html for full details on using Spree extensions. This guide is concerned with features of extensions specific to altering the appearance of your store.

h4. Creating an extension

First, to generate the extension, run the following command:

<shell>
script/generate extension my_theme
</shell>

h4. Load order

Each extension loaded by Spree will override the views and styleshets of those that preceed so you will need to configure their load order. Put something like the following inside the initializer block in the file +config/environment.rb+:

<shell>
config.extensions = [:all, :my_theme, :site]
</shell>



h3. Stylesheets

This part of the guide explains how override Spree's default stylesheets or add your own.

h4. Overriding Spree's stylesheets

h5. Less CSS

Spree uses "Less CSS":http://lesscss.org/ for its CSS. This adds features such as variables and mixins to CSS while still supporting standard CSS syntax. 

Stylesheets are created in app/stylesheets with the extension ".less" and are then compiled into ".css" files automatically.

Spree has a number of stylesheets for the from end of the site which are all compiled to the single file "screen.css" to improve site performance. These files are as follows:

<shell>
  _buttons.less
  _cart.less
  _checkout_progress.less
  _checkout.less
  _colors.less
  _forms.less
  _layout.less
  _messages.less
  _mixins.less
  _navigation.less
  _prices.less
  _product_details.less
  _product_lists.less
  _registration.less
  _reset.less
  _typography.less
  screen.less
</shell>

The "_" file prefix denotes a partial stylesheet. These are all included into the main stylesheet "screen.less" on compilation using the @import directive:

<shell>
  @import "_reset";
</shell>

To override any of these stylesheets, create a file of the same name within your extensions +app/stylesheets+ directory.

h4. Custom stylesheets

By default Spree will only load +/stylesheets/screen.css+ into the main layout. Rather than override the layout template you can load your custom stylesheet by editing +SITE_EXTENSION_DIR/my_theme_extension.rb+ and changing  the existing +activate+ method to the following:

<code>
def activate
  AppConfiguration.class_eval do
    preference :stylesheets, :string, :default => 'screen,my_theme'
  end
end
</code>

This would load screen.css first followed by my_theme.css.

h3. Using Custom Logos

h4. Override the default logo path

If you're not overriding the application layout you can specify a different logo image for the site using preferences as follows:

<code>
  AppConfiguration.class_eval do
    preference :logo, :string, :default => '/images/my_logo_.png'
  end
</code>

h3. Hooks

Hooks are a way of inserting your own content into many of Spree's default templates without having to make your own copy of those templates in your extension.

h4. Available hooks

A full list of available hooks is available "here":hooks.html

h4. Using hooks

In your extension directory you should find the file +my_theme_hooks.rb+.  Within this file you can specify which content should be inserted into which hooks.

h5. Option 1

Supply the hook name as a symbol followed by any arguments that are valid for 'render'

To use contents of your own partial template:

<shell>
  render_on :homepage_above_products, 'shared/welcome'
</shell>

To just insert a small string:

<shell>
  render_on :homepage_above_products, :text => "<h1>Welcome!</h1>"
</shell>

h5. Option 2, block syntax

You can suppy a block to +render_on+ which returns the string to be inserted. You can use any helpers you would
use in your views in this block.

The following would add a link below product details:

<shell> 
  render_on :product_below_description do
    '<p>' + link_to('Back to products', products_path) + '</p>'
   end
</shell>

This example would add a new tab to the admin navigation.

<shell> 
   render_on :admin_tabs do
     tab(:taxonomies)
   end
</shell>

h4. Defining your own hooks

If you anticipate your theme being extended by other themes you can define your own hooks when overriding Spree's templates.

<shell>
  <%= call_hook :my_hook_name %>
</shell>


h3. Customizing views

