h2. Spree 0.70.0 Release Notes

endprologue.

h3. Summary

This 0.70.0 release is the first Spree release to support Rails 3.1 and contains several exciting new features including a complete overhaul of the theming system and major improvements to the Promotions system.

INFO: We're always looking for more help with the Spree documentation.  If you'd like to offer assistance please contact us on the spree-user mailing list and we can give you commit access to the "spree-guides":http://github.com/spree/spree-guides documentation project.

h3. Theming Improvments

Theming support in this release has change significantly and all the new features are covered in detail in the following guides:

* "Customization Overview":customization.html - provides a high level introduction to all the customization and theming options now provided by Spree.
* "View Customization":view_customization.html - introduces and explains how to use Deface to customize Spree's views.
* "Asset Customization":asset_customization.html - explains how Spree uses Rails' new asset pipeline, and how you can use it to customize the stylesheets, javascripts and images provided by Spree.

INFO: While the upgrade instructions that follow briefly cover the new asset pipeline features we suggest you review the guides above as part of your upgrade preparation.

h4. Themes as engines

In previous versions (0.11.x and earlier) Spree encouraged the approach of bundling themes in their own extensions, with the advent of the asset pipeline in Rails 3.1 and the upcoming Theme Editor we're bringing back this approach as a suitable model for distributing and sharing themes.

While the distinction between themes and extensions is covered in the "Extensions & Themes":extensions.html guide they are both just Rails engines and can be treated as such.

We've created two front-end themes to help show this new approach in action:

* "Spree Blue":https://github.com/spree/spree_blue_theme - Recreates the original "blue" theme of 0.60.x as a stand alone theme.

* "Rails Dog Radio":https://github.com/spree/spree_rdr_theme - This recreates some of the aspects of the Rails Dog Radio demo application for a default Spree application.

Both themes can be installed by just adding a reference to the git repository to your Gemfile, ie:

<ruby>
  gem 'spree_blue_theme', :git => 'git://github.com/spree/spree_blue_theme.git'
</ruby>

h3. The Asset Pipeline

One of the more interesting new features included in Rails 3.1 is the asset pipeline, and a lot of the customization improvements in Spree are enabled by this feature. While the asset pipeline provides excellent flexibility and improved organization for all of Spree's assets (images, javascripts and stylesheets) it does add a significant overhead as all asset requests are now being handled by Rails itself (and not being handed off to the web server).

This can be especially noticeable in development mode when using a single process application server like Webrick. This release of Spree includes a small tweak to the standard pre-compiling rake task that allows pre-compiling of assets for development mode.


h4. Pre-compiling in production

Rails supports pre-compiling of assets which is intended to offload the overhead of generating and serving assets from the application server in production environments.

Pre-compiling is not required for the asset pipeline to function correctly in production, if you choose to not pre-compile Rails will generate each asset only once and serve each subsequent request using Rack::Cache.

Rack::Cache is generally sufficient for lower traffic sites, but pre-compiling will provide some additional speed increases by allowing the web server to serve all assets, including gzipped versions of javascript and css files.

To pre-compile assets for production  you would normally execute the following rake task (on the production server).

<ruby>
  $ bundle exec rake assets:precompile
</ruby>

This would write all the assets to the <tt>public/assets</tt> directory while including an MD5 fingerprint in the filename for added caching benefits.

NOTE: In production all references to assets from views using image_tag, asset_path, javascript_include_tag, etc. will automatically include this fingerprint in the file name so the correct version will be served.

h4. Pre-compiling for development

Spree alters the behaviour of the precompile rake task so when you execute it passing the RAILS_ENV environmental variable, as follows:

<ruby>
  $ bundle exec rake assets:precompile RAILS_ASSETS_NONDIGEST==true
</ruby>

It will still output the assets to <tt>public/assets</tt> but it will not include the MD5 fingerprint in the filename, hence the files will be served in development directly by the web server (and not processed by Rails).

WARNING: Using the precompile rake task in development will prevent any changes to asset files from being automatically included in when you reload the page. You must re-run the precompile task for changes to become available.

Rail's also provides the following rake task that will delete the entire <tt>public/assets</tt> directory, this can be helpful to clear out development assets before committing.

<ruby> $ rake assets:clean</ruby>

It might also be worthwhile to include the <tt>public/assets</tt> directory in your <tt>.gitignore</tt> file.

h3. Promotions

Promotions have been extended well beyond their coupon roots to include new <tt>activator</tt> support, which can now fire or activate a promotion for a variety of different user triggered events, including:

* Adding items to a cart
* Visiting specific pages
* Adjusting cart contents
* Using a coupon code

Promotions also includes a new <tt>Actions</tt> feature which can perform an action as a result of a promotion being actived, these actions currently include creating an adjustment or adding additional items to a cart.

For more details on these new promotions feature please refer to the "Promotions":promotions.html guide.

h3. New Extension Generator

There is a new extension generator available as part of this release.  The generator is utilized by a new executable contained within the gem.

You can generate new extensions inside an existing rails application or as a standalone git repository using the following command

<shell>
  $ spree extension foofah
</shell>

One of the most important advances in this new generator is that you can now easily run specs for extensions in their own standalone repository.  You just need to create a test application (one time only) as a context before running your specs.

<shell>
  $ rake test_app
  $ bundle exec rspec spec
</shell>

You can get more information on the extension generator in the "Creating Extensions":creating_extensions.html guide.

INFO: You must install the spree gem in order to use the new extension generator.


h3. Upgrade Instructions

These instructions are mainly concerned with upgrading Spree applications, extension developers should jump straight to the "Asset Customization"asset_customization.html and "View Customization":view_customization.html guides for details on the changes that are required for extensions to fulling support 0.70.0.

h4. Before you begin

To prevent problems later please ensure that you've copied all the migrations from your current version of Spree and all the extensions that you are running. While this is normal practice when setting up Spree and extensions any missing migrations will cause issues later in the upgrade process.

You can check that all Spree migrations are copied by running:

<ruby>
  rake spree:install:migrations
</ruby>

Each extension will provide it's own rake task (or generator) for copying migrations so please refer to the extensions README for instructions.

WARNING: It's vital that you confirm this first before starting the upgrade process as Rails 3.1 has altered how engine migrations are handled and incorrectly copying migrations later could result in data loss.


h4. Changes required for Rails 3.1

Most of the changes required to upgrade a Spree application to 0.70.0 is same for any Rails 3.0.x application upgrading to 3.1.

h5. Gemfile changes

You'll need to make several additions and changes to your Gemfile:

* Update spree to 0.70.0
* Update rails to 3.1.0
* Update mysql2 to 0.3.6 - if your using it.
* Ensure the assets group is present:

<ruby>
  group :assets do
    gem 'sass-rails', "~> 3.1.0.rc"
    gem 'coffee-rails', "~> 3.1.0.rc"
    gem 'uglifier'
  end
</ruby>

h5. Update config/boot.rb

Rails 3.1 simplifies the <tt>config/boot.rb</tt> file significantly, so update yours to match:

<ruby>
  require 'rubygems'

  # Set up gems listed in the Gemfile.
  ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../../Gemfile', __FILE__)

  require 'bundler/setup' if File.exists?(ENV['BUNDLE_GEMFILE'])
</ruby>

h5. Enable the asset pipeline

Add the following line to <tt>config/application.rb</tt>, this will enable the Asset Pipeline feature (required by 0.70.0):

<ruby>
  config.assets.enabled = true
</ruby>

h5. Remove deprecated configuration

Remove the following line from <tt>config/environments/development.rb</tt>.

<ruby>
  config.action_view.debug_rjs = true
</ruby>


h5. Retire lib/spree_site.rb

The spree_site.rb file is no longer required so it's important to migrate any existing code out of this file and into the correct location.

* Model, controller or helper evals should be relocated to a suitable _decorator.rb file.
* Configuration settings should be moved to initializers.
* If you are activating custom Abilities or Calculators, you should remove then for now. You can re-add them to config/application.rb after you've ran the spree:site generator below. They will need to be inside the <tt>config.to_prepare</tt> block.

NOTE: The decorator initialization block will be automatically included in config/application.rb for you, when you run the spree:site generator below.

h5. Remove spree_site from config/application.rb

Also ensure the following line is **not** present in config/application.rb:

<ruby>
  require 'spree_site'
</ruby>

h4. Update gems & generate Spree files

Once you've completed all the Rails 3.1 steps above, you can now update your dependencies and start generating the new asset pipeline placeholders.

h5. Install dependencies

Install all the required gems, and lock your dependencies by running:

<ruby>
  bundle update
</ruby>

h5. Generate & copy required files

Running the <tt>spree:site</tt> generator will create the skeleton structure for the asset pipeline, and also copy missing migrations.

<ruby>
  rails g spree:site</ruby>


After running the generator above, it's best to check to make sure you do not have multiple copies of the following line, in <tt>config/application.rb</tt>:

<ruby>
  config.middleware.use "RedirectLegacyProductUrl"
  config.middleware.use "SeoAssist"
</ruby>


h5. Update your database

If you encounter any issues with this step please ensure you've completed the "Before you begin":release_notes_0_70_0.html#before-you-begin section above.

WARNING: Make sure you've taken a backup of the database before attempting this step.

<ruby>
  rake db:migrate
</ruby>


h4. Migrating your assets

Cleaning up your <tt>/public</tt> directory is one major advantage of using Rails 3.1. The main task required here is to separate your application specific assets (javascript, stylesheets and images) from all of Spree's (and all those belonging to all the extensions installed) which have been mingled together in your public directory.

h5. Asset Organization

Assets should be placed inside your application in one of three locations: <tt>app/assets</tt>, <tt>lib/assets</tt> or <tt>vendor/assets</tt>.

<tt>app/assets</tt> is for assets that are owned by the application, such as custom images, JavaScript files or stylesheets.

<tt>lib/assets</tt> is for your own libraries’ code that doesn’t really fit into the scope of the application or those libraries which are shared across applications.

<tt>vendor/assets</tt> is for assets that are owned by outside entities, such as code for JavaScript plugins.

NOTE: If you are using a library like Jammit solely for concatenating and minifying your javascript and stylesheet files then we suggest you remove it from your application as part of the Rails 3.1 upgrade.

For a full explanation of how Spree uses Rails' asset pipeline and how to update your site to use these new features please refer to the "Asset Customization":asset_customization.html guide.


h5. Cleaning up /public

Once you've relocated all <b>your</b> applications assets, the only remaining directories and files in <tt>/public</tt> should be images that you've uploaded for your Products (or taxonomies). If you are using the default Spree configuration these will be in <tt>/public/assets</tt>.

WARNING: Leaving any javascript, stylesheet or image files in the public directory will override those provided by Spree or it's extensions. So it's vital that you delete all remaining files from the <tt>/public</tt> directory, <b>EXCEPT YOUR PRODUCT IMAGES!</b>.

NOTE: If you are using S3 (or another cloud storage system) for your Product images then your <tt>/public</tt> directory should be completly empty.

h4. Including old style theming hooks

With the introduction of Deface the old style theming hooks have been deprecated, the old hooks will continue to function after the upgrade as they are automatically upgraded to Deface overrides, we strongly suggest you upgrade them as soon as possible.

To include your previously defined old style theming hooks from <tt>lib/site_hooks.rb</tt> add the following to the bottom of <tt>config/application.rb</tt>

<ruby>
  require 'lib/site_hooks'
</ruby>

NOTE: The development log will include suggested replacement Deface overrides anytime Rails encounters a old style hook call. These suggestions are a best effort replacement, but might need some tweaks as some elements have been moved while removing the old hook calls from Spree's view files.

For more information about using Deface overrides please refer to the "View Customization":view_customization.html guide.

