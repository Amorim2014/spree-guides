h2. Internationalization (i18n)

This guide covers how Spree uses Rails' internationalization features, and how you can leverage and extend these features in your Spree contributions and extensions. After reading it, you should be familiar with:

* How Spree is internationalized
* How to add translations
* Internationalizing extensions
* Disabling internationalization

endprologue.

h3. How Spree i18n works

Spree uses the standard Rails approach to internationalization so we suggest take some time to review the "official Rails i18n guide":http://guides.rubyonrails.org/i18n.html and the "rails-i18n.org wiki":http://rails-i18n.org/wiki to help you get started.     

h4. The spree-i18n project

Spree now stores all of the translation information in a separate Github project known as "spree-i18n":http://github.com/railsdog/spree-i18n.  This is a stand alone project with a large number of volunteer committers who maintain the locale files.  This is basically the same approach
followed by the Rails project which keeps their localizations in "rails-i18n":http://github.com/svenfuchs/i18n.

The project is actually a Spree extension.  This extension contains translations only.  The rest of code needed to support the i18n features is part of the Spree core.

WARNING. You will need to install the "spree-i18n":http://guides.rubyonrails.org/i18n.html extension if you want to use any of the community supplied translations of Spree.  

h4. Translation files

Each language is stored in one or more YAML files located in +config/locales*. Each YAML file contains one top level key which is the language code for the translations contained within that file:

<shell>en-US: 
  abbreviation: Abbreviation
  access_denied: "Access Denied"
  account: Account
  account_updated: "Account updated!"
</shell>

h5. Spree translations

Spree maintains its localizaiton information in a YAML file using a naming convention similar to that of the Rails project.  Each of the localization files ends with +_spree.yml+.  This is to prevent it from being confused with the Rails localizations.  The file prefix represents the language code of the locale.
 
For example, the Russian translation is contained in +ru-RU_spree.yml+.

h5. Required files

Each locale that you wish to support will require both a Rails and Spree translation.  The required Spree translation files are available automatically when you install the spree-i18n extension.  The Rails translation files should be added manually to your application's +config/locales* directory.

So for example, if you wanted to provide a Russian translation, you would install the spree-i18n extension and then copy the +ru-Ru.yml+ file from rails-i18n into +#{RAILS_ROOT}/config/locales+.

NOTE. If you do not need all of the localizations for your project you can skip installation of the spree-i18n extension and just copy the needed Spree translations to +#{RAILS_ROOT}/config/locales+. 


h4. Translating Views

When reviewing the source of any view in Spree you'll notice that all text is rendered by passing a string to a helper method similar to:

<shell><%= t('price') %></shell>

The *t()* helper method looks up the currently configured locale and retrieves the translated value from the relevant locale yaml file.

<shell>>> I18n.locale = :"en-US"
=> :"en-US"
>> I18n.t('price')
=> "Price"
>> I18n.locale = :de
=> :de
>> I18n.t('price')
=> "Preis"
</shell>

h4. Setting the default Locale

The default locale for Spree is en-US. This can be changed by editing the :default_locale setting in the AppConfiguration model. This setting is ignored unless the relevant translation file is within +#{RAILS_ROOT}/config/locales+. In the future we hope to add a localization settings page that will allow you to set the default locale from the admin screen [#35].

h4. Setting the default Currency

Spee makes use of the rails NumberHelper module to format numbers into the form of currency, otherwise prices within spree are simply regarded as numbers with no special properties. Currency formatting is therefore dictated by the current user locale (if locale is allowed to change) or the default locale (as above) if locale is fixed. To specify a currency format therefore you should do the following:

For each locale you support (just the default if you don't allow locale switching) you must make a file, in the style +<locale>_numbers.yml+, within +#{RAILS_ROOT}/config/locales+ following the format:

<shell>
---
en-GB:
  number:
    currency:
      format:
        format: "%u%n"
        unit: "Â£"
        precision: 2
        separator: '.'
        delimiter: ','
</shell>

To ensure that currency stays consistent when a user changes there locale the +same+ currency details should be provided for each of the supported locales.

h3. Maintaing the translations

Spree has several rake tasks that facilitate the maintanence of translations.  These rake tasks are included as part of the spree-i18n extension.

WARNING. The following instructions require that you have the spree-i18n extension installed.  The rake tasks will only run if executed inside of the Spree source code.

h4. Refreshing the en-US localizaiton

Before you run any of the other rake tasks, its a good idea to "refresh" the localization information for +en_US_spree.yml+.  

<shell>
rake spree:i18n:refresh
</shell>

This updates the +en_US_spree.yml+ localization with the latest information from the Spree project.  Since this file is the basis for most other commands, its a good idea to refresh it before doing anything else.  If you have commit rights to the +spree-i18n+ project, feel free to commit the changes as well.

h4. Adding a new translation
                                          
When adding a new language all you need to do is copy the en-US.yml file and rename it to whatever language code you require, you must also change the top level element of this new file to the same language code. 

You can do this automatically by running the following rake task (where *et* is the new language you want to add):

<shell>$ rake spree:i18n:new LOCALE=et</shell>

This will create a new +et_spree.yml+ localization based on the default english locale.

<shell>
---
et: 
  'no': "No"
  'yes': "Yes"
  5_biggest_spenders: "5 Biggest Spenders"
  a_copy_of_all_mail_will_be_sent_to_the_following_addresses: A copy of all mail be sent to the following addresses
  abbreviation: Abbreviation
  access_denied: "Access Denied"
  account: Account
  account_updated: "Account updated!"
  action: Action
  actions:
    cancel: Cancel
    create: Create
    destroy: Destroy  
    
  ...
</shell>

Simply edit the new Spree localizaiton you just created by replacing the english translations with that of your new chosen locale.  You will also need to grab a copy of the corresponding Rails localization.  So in the case of estonian, you would grab "+et.yml+":http://github.com/svenfuchs/rails-i18n/blob/master/rails/locale/et.yml from the "rails-i18n":http://github.com/svenfuchs/rails-i18n project.     

To use the translation in your project you should copy both +et.yml+ and +et_spree.yml+ into +#{RAILS_ROOT}/config/locales+ in your application.  The Spree translations in spree-i18n are automatically available so technically you can rely on the extension and not copy +et_spree.yml+ anywhere but its probably a good idea to not use the entire spree-i18n extension and just copy the localizations you need.

h4. Adding a new string to all translations

If you're working on a patch for Spree it's vital that you ensure any interface text is present in all translation yaml files and that you use the helper methods to display the relevant translation on all views (or helper methods).  Once the key has been added to the default (english) translation you wil want to add a place holder value for the rest of the translation files.

<shell>$ rake spree:i18n:sync</shell>

This task simply ensures that you're new string is included in all translations (with the US English value as the default value), and it also alphabetizes all strings in the YAML files!    

h4. Checking the status of a translation

You can get a rough approximation of the completion percentage for a translation file based on the number of entries that have not changed from their english default.

<shell>
rake spree:i18n:stats
</shell> 

h3. Localizing Extensions

Spree extensions can contain their own +config/locales* directory where developers can include yaml files for each language they wish to support. 

We strongly urge all extension developers to ensure all customer facing text is rendered via the +t()+ helper method even if they only include a single default language locale file (as other users can simply include the required yaml file and translations in their site extension).    

h3. Disabling Internationalization

If you don't want to allow users to change the language / locale you can disable locale switching by changing the :allow_locale_switching setting to false in the AppConfiguration model.

