h2. Spree 0.10.0 Release Notes

WARNING. Some of the information here could be made redundant by later changes.

endprologue.     

h3. Upgrade Notes

h4. General upgrade process

h5. Back up your database and code

Always advisable! 

h5. Perform the standard upgrade command
<shell> 
spree --update
</shell>

h5. Remove obsolete initializers 
<shell>
rm -rf config/initializers/compass.rb
</shell>

h5. Remove defunct contents of public dirs (unless you need something in there)

<shell>
rm -rf public/javascripts/
rm -rf public/stylesheets/
rm -rf public/images/
</shell>

h5. Take note of existing payment gateway settings

The new payment gateway implementation will remove existing settings, and these need to be added again using the new interface.

h5. Run the migrations
<shell> 
rake db:migrate
</shell>       

h5. Configure a payment method  

See the "additional information":#improvementsto-payment-gateway-configuration  later in the 
release notes.


h5. Deprecation Warnings

DEPRECATION: +require "activerecord"+ is deprecated and will be removed in Rails 3. Use +require "active_record"+ instead. 

Remove all instances of +require 'activerecord'+ from your +Rakefile+s (including those contained in your extensions, including the site extension, etc.)

h4. API Changes 

h5. Change to +@taxonomies+ variable

+@taxonomies+ used to be set in most shared views. Now, it is only set after calling 
+get_taxonomies+ (inherited from Spree's base controller).

h5. Spree Base Controller and Layouts

+Spree::BaseController+ inherits directly from +ActionController::Base+, rather than
from +ApplicationController+ (which itself is now an empty class to help interaction with
other Rails apps). 
If you used +app/views/layout/application.html.erb+ in an extension. e.g.
<shell>
Spree::BaseController.class_eval { layout 'application' }
</shell>
... then you will need to rename it to +spree_application.html.erb+ and update the occurrences.

h5. Adding admin tabs changed

+@extension_tabs+ is no longer used, instead use theme "hooks":hooks.html.



h3. Improvements to Payment Gateway Configuration

This release contains significant improvements to how payment gateways are configured.  Gateways are no longer supported by database migrations, this scheme has been replaced by Active Record models that extend +Gateway+.  The configuration of gateways is now done through standard Spree +preference configuration+.  The "documentation":payment_gateways.html has also been updated and contains a more detailed explanation. 

One major improvement is that it is now possible to configure multiple gateways for each of your Rails environments.  Its also possible to use the live production server in development mode when previously, you were required to run in test mode.  One unfortunate side effect of this improvement is that your existing gateway configuration information will be lost and you will need to reconfigure your gateway in the admin interface.

INFO. You should make a note of your gateway configuration setting before upgrading since you will need to reconfigure your gateway when you're done.

This approach to implementing and configuring gateways is extremely flexible.  It makes it trivial to implement a new gateway that is already supported by Active Merchant.  There are other useful benefits to this approach that a developer may be interested in knowing.

h4. Support of Non Active Merchant Gateways

This architecture allows Spree to support gateways that are not officially supported by Active Merchant.  Many times a new gateway is donated by someone in the community but its languishing in the queue waiting for someone to test and accept the patch.  You have the option of taking that code (or writing your own from scratch) and implementing it within Spree.  Instead of delegating to an Active Merchant class, you can simply implement that functionality yourself.  You could also include the new gateway code from an Active Merchant fork inside your implementation and delegate the standard authorize, capture, etc operations to it.

h4. Ability to "Patch" Active Merchant Gateways

We've noticed that sometimes it takes a while for a crucial Active Merchant patch to be applied.  That's certainly understandable, the "Shopify":http://shopify.com guys have a business to run and its probably not a high priority for them to make sure that the latest obscure gateway patch is applied in a timely fashion.  Fortunately, the Spree approach to wrapping these gateways provides you with a convenient option.

Lets say there is a bug with the +authorize+ method.  You could simply provide an implementation of the gateway that has the patched version of the +authorize+ method and then delegates to the Active Merchant class for everything else (since that works just fine.)

h4. Additional Functionality Beyond Active Merchant

Another benefit of the architecture is that it makes it possible for Spree to provide additional common functionality that was not envisioned by Active Merchant.  Specifically, it is possible to provide an abstraction for storing credit card profiles to be used with recurring payments.  There's a good reason for Active Merchant to not care about this functionality.  Its designed for people who just want to drop a single gateway provider into their application.  Most programmers don't need three different gateways at once.  Spree is a specialized use case.  Its providing multiple gateways for you to choose from and so its desirable to have a standard method for operations such as this.

INFO. Recurring payments are not yet supported in Spree although there are plans to provide this in the near future.

h3. Seed and Sample Data in Extensions

Seed data is data that is needed by the application in order for it to work properly.  Seed data is not the same as sample data.  Instead of loading this type of data in a migration it is handled through the standard rails task through +rake db:seed+.  The rake task will first load the seed data in the spree core (ex. +db/default/countries.yml+.)  Spree will then load any fixtures found in the +db/default+ directory of your extensions.  If you wish to perform a seeding function other than simply loading fixtures, you can still do so in your extension's  +db/seeds.rb+ file.

Sample data is data that is convenient to have when testing your code.  Its loaded with the +rake db:sample+ task.  The core sample data is loaded first, followed by any fixtures contained in the +db/sample+ directory of your extensions.  

If you have fixtures in your extension with the same filename as those found in the core, they will be loaded instead of the core version.  This applies to both sample and seed fixtures.  This allows for fine grained control over the sample and seed data.  For example, you can create your own custom sample order data in your site extension instead of relying on the version provided by Spree.           

WARNING.  You should remove all +db:bootstrap+ tasks from your extensions.  The new bootstrap functionality in the core will automatically load any fixtures found in +db/sample+ of your extension.  Failing to remove this task from your extension will result in an attempt to create the fixtures twice.       

h3. Checkout Refactoring

Numerous changes have been made to the checkout process.  This is just a brief summary of some of the highlights.  For a more complete description of the checkout process please see the "checkout documentation":checkout.html

h4. Countries Available for Shipping and Billing 

The mechanism for determining the list of billing and shipping countries has changed.  Prior to this release, there was no way to limit the billing countries and shipping countries were limited by the countries included in the shipping zones that were configured.  The new approach is to simply use all countries defined in the database by default.  

The list can be limited to a specific set of countries by configuring the new +:checkout_zone+ preference and setting its value to the name of a "zone":/zones.html containing the countries you wish to use.  This should handle most cases where the list of billing and shipping countries are the same.  You can always customize the code via extension if this does not suit your needs.

h4. State Machine

The Checkout model now has its own "state machine":http://github.com/pluginaweek/state_machine.  This allows for easier customization of the checkout process.  It is now much simpler to add or remove a step to the default checkout process. Here's an example which avoids the address step in checkout.

<shell>
class SiteExtension < Spree::Extension  
  def activate
    # customize the checkout state machine
    Checkout.state_machines[:state] = StateMachine::Machine.new(Checkout, :initial => 'payment') do
      after_transition :to => 'complete', :do => :complete_order
      before_transition :to => 'complete', :do => :process_payment
      event :next do
        transition :to => 'complete', :from => 'payment'
      end
    end

    # bypass creation of address objects in the checkouts controller (prevent validation errors)
    CheckoutsController.class_eval do
      def object
        return @object if @object
        @object = parent_object.checkout
        unless params[:checkout] and params[:checkout][:coupon_code]
          @object.creditcard ||= Creditcard.new(:month => Date.today.month, :year => Date.today.year)
        end
        @object
      end
    end  
  end
end
</shell>

h4. Controller Hooks

The +CheckoutController+ now provides its own "hook mechanism" (not to be confused with theme hooks) which allow for the developer to perform additional logic (or to change the default) logic that is applied during the edit and/or update operation for a particular step.  The +Spree::Checkout::Hooks+ module provides this additional functionality and makes use of methods provided by the +resource_controller+ gem.  
See the "checkout documentation":checkout.html#controller-logic for further details and examples.

h4. Checkout Partials

The default theme now contains several partials located within +vendor/extensions/theme_default/app/views/checkouts+.  Each checkout step automatically renders the +edit.html.erb+ view along with a corresponding partial based on the state associated with the current step.  For example, in the delivery step the +_delivery.html.erb+ partial is used.

h4. Javascript

Spree no longer requires javascript for checkout but the user experience will be slightly more pleasing if they have javascript enabled in their browser.  Spree automatically includes the +checkout.js+ file located in the default theme.  This file can be replaced in its entirety through use of a site extension.

h3. RESTful API

The REST API is designed to give developers a convenient way to access data contained within Spree.  With a standard read/write interface to store data, it is now very simple to write third party applications (ex. iPhone) that can talk to Spree.  The API currently only supports a limited number of resources.  
The list will be expanded soon to cover additional resources.  Adding more resources is simply a matter of making the time for testing and investigating possible security implications. 
See the "REST API section":rest.html for full details.

h3. Inventory

Inventory modeling has been modified to improve performance.  Spree now uses a hybrid approach where on-hand inventory is stored as a count in +Variant#on_hand+, but back-ordered, sold or shipped products are stored as individual +InventoryUnits+ so they can be tracked.  

This improves the performance of stores with large inventories.  When the +on_hand+ count is increased using +Variant#on_hand=+, Spree will first fill back-orders, converting them to +InventoryItems+, then place the remaining new inventory as a count on the +Variant+ model. A migration is in place that will convert on-hand +InventoryItems+ to a simple count during upgrade.  Due to an issue with the sample data, demo stores cannot be upgraded in this fashion and should be re-bootstrapped.

h3. Miscellaneous improvements

h4. Sample Product Images in Extensions

For some time now you've been able to write sample data fixtures in extensions
that will get run when you load sample data with the +rake db:bootstrap+ task.

Now you can also add sample product image files in your extensions in the 
extensions own +lib/tasks/sample/products+ directory.  These images will be 
copied to the +public/assets/products+ directory when the sample data is loaded.
